[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/auth/Auth.js",
    "content": "\"use strict\";\n\nconst audit = require('../helper/audit');\nconst generateId = require('../helper/generateId');\n\n/**\n * Authenticator/passport strategy wrapper abstraction.\n *\n * I.e. it is the parent class of all auth classes.\n */\nclass Auth\n{\n\n  /**\n   * @param {string} method\n   * @param {object} options common options for all auth classes; see properties\n   */\n  constructor(method, options)\n  {\n\n    /**\n     * Authentication method name. E.g. 'email' for Email based authentication.\n     * This is used as an unique id for various things.\n     * @type string\n     */\n    this.method = method;\n\n    /**\n     * This is a standard descriptor of this authentication mechanism that is publicly shared.\n     * Clients should use this to figure out how to use a login auth from outside.\n     *\n     * Not directly configurable.\n     *\n     * @type object\n     */\n    this.description = {\n      method: this.method\n    };\n\n    /**\n     * Additional settings given to passport.authenticate.\n     *\n     * Not directly configurable.\n     *\n     * @type object\n     */\n    this.authenticateOptions = {\n      failureMessage: 'login failed',\n      badRequestMessage: 'XXX'\n    };\n\n    /**\n     * Users collection.\n     *\n     * Note: various things all assume that a CachedCollection is being used.\n     *\n     * @type {CachedCollection}\n     */\n    this.users = options.users || options.collection;\n\n    /**\n     * Default roles new registered users should assume.\n     *\n     * @type {object}\n     */\n    this.defaultRoles = options.defaultRoles || {};\n\n    /**\n     * Custom fields\n     *\n     * @type {object}\n     */\n    this.custom = options.custom || {};\n\n    //~ /**\n    //~ * Instance of email sender class for sending emails.\n    //~ *\n    //~ * @type {EmailSender}\n    //~ */\n    //~ this.emailSender = options.emailSender;\n\n\n    //~ this.defaultNotificationInterval = options.defaultNotificationInterval || -1;\n\n    //~ if (options.recaptcha)\n    //~ {\n    //~ this.description.recaptcha = true;\n    //~ }\n  }\n\n  /**\n   * Must be overridden to provide implementation of said authentication method.\n   * @param {ExpressApplication} app express application\n   * @param {string} prefix all route prefix\n   * @param {Passport} passport passport class\n   * @abstract\n   */\n  install(app, prefix, passport)\n  {\n    throw new Error('TODO: ABSTRACT');\n  }\n\n  /**\n   * Helper method that finds an user based on a credential.\n   *\n   * A credential is something like an email address or a facebook user id.\n   *\n   * This is something that uniquely identifies an account.\n   *\n   * @param {string} value\n   * @return {User|false}\n   */\n  findUser(value)\n  {\n    const users = this.users.lookup;\n\n    for (let userId in users)\n    {\n      let user = users[userId];\n      let credentials = (user.credentials || [])\n        .filter((credential) => credential.type === this.method && credential.value === value);\n\n      if (credentials.length > 0)\n      {\n        return user;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Helper method for SSO type logins.\n   *\n   * This method finds existing or creates new accounts basen on profile\n   * information returned from oauth partner.\n   *\n   * @param {string} username unique id\n   * @param {Profile} profile unique id\n   * @param {Function} done callback to call when our work is done\n   * @param {Request} [req] request object\n   */\n  handleUserLoginByProfile(username, profile, done, req = undefined)\n  {\n    username = username || profile.id;\n    // find an account\n    let user = this.findUser(username);\n\n    if (user) // if found, log in found account\n    {\n      done(null, user);\n    }\n    else // if not found, make a new user and log new user in\n    {\n      user = this.createUserFromProfile(profile);\n      this.users.createRecord(user)\n        .then((user) =>\n        {\n          req && req.audit(audit.ACCOUNT_CREATE, JSON.stringify({\n            user,\n            profile\n          }));\n          done(null, user);\n        }, done);\n    }\n  }\n\n  /**\n   * Helper method that creates an User object from a Profile\n   *\n   * @param {Profile} profile\n   * @return {User}\n   */\n  createUserFromProfile(profile)\n  {\n    let user = {\n      // unique id\n      // can't use id from profile as these might conflict across login providers\n      id: generateId(),\n      // login credentials\n      credentials: [{\n        type: this.method,\n        value: profile.id\n      }],\n      // new user roles\n      roles: this.defaultRoles,\n      // profile bs\n      displayName: profile.displayName,\n      //~ name: profile.name,\n      photos: profile.photos,\n      //~ // notification settings\n      //~ notifications: [],\n      //~ notificationInterval: -1,\n      //~ notificationLastSent: 0,\n      //~ notificationSubscriptions: {},\n    };\n\n    for (let field in this.custom)\n    {\n      if (this.custom[field].derive)\n      {\n        let value = this.custom[field].derive(profile);\n\n        if (value)\n        {\n          user[field] = value;\n        }\n      }\n    }\n\n    return user;\n  }\n\n  /**\n   * helper method that creates a profile object from a credential address\n   */\n  async createProfileFromCredential(id, extra = {})\n  {\n    if (!id)\n    {\n      throw new Error(`id not specified: ${id}`);\n    }\n    // we don't accept spaces in id\n    id = id.replace(/\\s+/g, '');\n    if (!id)\n    {\n      throw new Error(`id not specified: ${id}`);\n    }\n    let displayName = extra.displayName || (id.indexOf('@') !== -1 && id.substr(0, id.indexOf('@'))) || id;\n    let user = {\n      id,\n      displayName\n    };\n    return user;\n  }\n\n  /**\n   * Helper method that produces a middleware to handle successful logged in\n   * case.\n   *\n   * @param {boolean} [redirect=false] redirect based login is used\n   * @return {ExpressMiddleware}\n   */\n  loggedIn(redirect = false)\n  {\n    if (redirect && typeof redirect !== 'string')\n    {\n      redirect = '/';\n    }\n\n    return function (req, res)\n    {\n      // if not req.user.id then it is not a real use\n      // i.e. we are forwarding error or custom payload\n      if (!req.user.id)\n      {\n        res.error(req.user.error, audit.LOGIN_FAILURE);\n        req.logout();\n      }\n      else\n      {\n        // otherwise, we make a fuss about logging in\n        res.audit(audit.LOGIN, `Logged in via ${this.method}`, JSON.stringify({\n          id: req.user.id,\n          displayName: req.user.displayName,\n          roles: req.user.roles\n        }));\n\n        // for redirect based login methods, we redirect back to some url\n        if (redirect)\n        {\n          res.redirect(redirect);\n        }\n        else\n        {\n          // otherwise we return a login success message\n          res.success(`Logged in via ${this.method}`, audit.LOGIN);\n        }\n      }\n    }.bind(this);\n  }\n\n}\n\nmodule.exports = Auth;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/auth/Auth.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "audit",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/Auth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/Auth.js~audit",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/Auth.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "generateId",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/Auth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/Auth.js~generateId",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/Auth.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "class",
    "name": "Auth",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/Auth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/Auth.js",
    "importStyle": "Auth",
    "description": "Authenticator/passport strategy wrapper abstraction.\n\nI.e. it is the parent class of all auth classes.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 52,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "common options for all auth classes; see properties"
      }
    ]
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "method",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth#method",
    "access": "public",
    "description": "Authentication method name. E.g. 'email' for Email based authentication.\nThis is used as an unique id for various things.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "description",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth#description",
    "access": "public",
    "description": "This is a standard descriptor of this authentication mechanism that is publicly shared.\nClients should use this to figure out how to use a login auth from outside.\n\nNot directly configurable.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "authenticateOptions",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth#authenticateOptions",
    "access": "public",
    "description": "Additional settings given to passport.authenticate.\n\nNot directly configurable.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "users",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth#users",
    "access": "public",
    "description": "Users collection.\n\nNote: various things all assume that a CachedCollection is being used.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "CachedCollection"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "defaultRoles",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth#defaultRoles",
    "access": "public",
    "description": "Default roles new registered users should assume.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "custom",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth#custom",
    "access": "public",
    "description": "Custom fields",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "install",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth#install",
    "access": "public",
    "description": "Must be overridden to provide implementation of said authentication method.",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "ExpressApplication"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "express application"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": "all route prefix"
      },
      {
        "nullable": null,
        "types": [
          "Passport"
        ],
        "spread": false,
        "optional": false,
        "name": "passport",
        "description": "passport class"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "findUser",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth#findUser",
    "access": "public",
    "description": "Helper method that finds an user based on a credential.\n\nA credential is something like an email address or a facebook user id.\n\nThis is something that uniquely identifies an account.",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "User",
        "false"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "handleUserLoginByProfile",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth#handleUserLoginByProfile",
    "access": "public",
    "description": "Helper method for SSO type logins.\n\nThis method finds existing or creates new accounts basen on profile\ninformation returned from oauth partner.",
    "lineNumber": 143,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "username",
        "description": "unique id"
      },
      {
        "nullable": null,
        "types": [
          "Profile"
        ],
        "spread": false,
        "optional": false,
        "name": "profile",
        "description": "unique id"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "done",
        "description": "callback to call when our work is done"
      },
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": true,
        "name": "req",
        "description": "request object"
      }
    ],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "createUserFromProfile",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth#createUserFromProfile",
    "access": "public",
    "description": "Helper method that creates an User object from a Profile",
    "lineNumber": 174,
    "params": [
      {
        "nullable": null,
        "types": [
          "Profile"
        ],
        "spread": false,
        "optional": false,
        "name": "profile",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "User"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "createProfileFromCredential",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth#createProfileFromCredential",
    "access": "public",
    "description": "helper method that creates a profile object from a credential address",
    "lineNumber": 217,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "extra",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "loggedIn",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/Auth.js~Auth#loggedIn",
    "access": "public",
    "description": "Helper method that produces a middleware to handle successful logged in\ncase.",
    "lineNumber": 244,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "redirect",
        "description": "redirect based login is used"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExpressMiddleware"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js",
    "content": "\"use strict\";\n\nconst audit = require('../helper/audit');\nconst failureImpl = require('../restriction/failure');\nconst generatePassword = require('../fields/strongPassword').generate;\nconst json = require('body-parser')\n  .json();\nconst recaptchaImpl = require('../restriction/recaptcha');\n\nconst Auth = require('./Auth');\nconst LocalStrategy = require('passport-local');\n\n/**\n * Email based login.\n *\n * Requies ```passport-local``` package.\n */\nclass EmailAuth extends Auth\n{\n\n  /**\n   * @param {object} options see Auth class + additional options for email configuration.\n   * @property {number} [options.tokenExpxiryMinutes=10] number of minutes to restrict token exchange to for passwordless login\n   */\n  constructor(options = {})\n  {\n    super('email', options);\n\n    /**\n     * Instance of email sender class for sending emails.\n     *\n     * If this is not specified, email login is disabled.\n     *\n     * @type {EmailSender}\n     */\n    this.emailSender = options.emailSender;\n\n    /**\n     * Instance of crypt class for encrypting and verifying passwords.\n     *\n     * @type {Crypt}\n     */\n    this.crypt = options.crypt;\n\n    /**\n     * Name of application.\n     * Used for sending email.\n     * @type {string}\n     */\n    this.applicationName = options.applicationName || 'Account';\n\n    /**\n     * Email from address\n     * Used for sending email.\n     * @type {string}\n     */\n    this.fromAddress = options.fromAddress || 'no-thanks@reply-factory.com';\n\n    this.description.usesPassword = true;\n    this.description.tokenExpiryMinutes = options.tokenExpiryMinutes || 10;\n\n    /**\n     * @private\n     */\n    this.tokenExpiryMilliseconds = this.description.tokenExpiryMinutes * 60 * 1000;\n\n    /**\n     * Settings for rate limiting failed requests.\n     *\n     * Note: use this or recaptcha.\n     */\n    this.block = options.block || undefined;\n\n    /**\n     * Settings for rate limiting through recaptcha.\n     *\n     * Note: use this or recaptcha.\n     */\n    this.recaptcha = options.recaptcha || undefined;\n\n\n    if (this.recaptcha)\n    {\n      if (this.recaptcha.publicKey)\n      {\n        this.description.recaptcha = this.recaptcha.publicKey;\n      }\n      else\n      {\n        this.recaptcha = undefined;\n      }\n    }\n\n    /**\n     * If true, it remembers any passwords specified registration.\n     */\n    this.allowPasswordSettingDuringRegistration = options.allowPasswordSettingDuringRegistration || false;\n\n\n    /**\n     * login security tokens\n     * @protected\n     */\n    this.tokens = {};\n  }\n\n  /**\n   * logs users in based on token or based on username(email)/password\n   */\n  async strategyImpl(req, username, password, done)\n  {\n    const tokens = this.tokens;\n\n    // call if unsuccessful\n    function error(msg, detailed = undefined)\n    {\n      req.audit(audit.LOGIN_FAILURE, msg, detailed);\n      if (typeof msg === 'string')\n      {\n        msg = {\n          error: msg\n        };\n      }\n      done(null, msg);\n    }\n\n    // expire aged tokens\n    const now = Date.now();\n\n    for (let tok in tokens)\n    {\n      if (now >= tokens[tok].expires)\n      {\n        delete tokens[tok];\n      }\n    }\n\n    // passwordless login\n    if (tokens[username])\n    {\n      if (tokens[username].password === password)\n      {\n        const profile = await this.createProfileFromCredential(username, tokens[username].extra);\n\n        delete tokens[username];\n\n        this.handleUserLoginByProfile(username, profile, done, req);\n      }\n      // else\n      // {\n      //   error('Temporary Login password did not match.', username);\n      // }\n    }\n    // else // username / password login\n    // {\n    const user = this.findUser(username);\n\n    if (user && user.credentials) // if found, log in found account\n    {\n      for (let credential of user.credentials)\n      {\n        if (credential.type === this.method && credential.value === username && user.password)\n        {\n          this.crypt.verify(password, user.password)\n            .then((verified) =>\n            {\n              if (verified)\n              {\n                done(null, user);\n              }\n              else\n              {\n                error('Email and password combination not found.', username);\n              }\n            }, done);\n\n          return;\n        }\n      }\n    }\n    error('Email and password combination not found.', username);\n    // }\n  }\n\n  /**\n   * sends temporary login password to email address\n   */\n  async passwordlessImpl(req, res)\n  {\n    const tokens = this.tokens;\n    try\n    {\n      const username = req.body.username;\n\n      if (!req.body.username || typeof req.body.username !== 'string')\n      {\n        return res.error('Username not specified', audit.LOGIN_FAILURE);\n      }\n      const temporaryPassword = generatePassword();\n      const theme = req.params.theme || 'login';\n\n      await this.sendTemporaryPassword(theme, username, temporaryPassword, this.description.tokenExpiryMinutes, req.body.loginLinkPrefix);\n      tokens[username] = {\n        password: temporaryPassword,\n        expires: Date.now() + this.tokenExpiryMilliseconds,\n        extra: req.body,\n      };\n      res.success('A login email has been sent to email address.', audit.LOGIN, username);\n    }\n    catch (e)\n    {\n      console.log(e);\n      res.error('Error sending email. Please verify that your address is correct and is valid.', audit.LOGIN_FAILURE.e);\n    }\n  }\n\n  /**\n   * @override\n   */\n  install(app, prefix, passport)\n  {\n    // Protect methods with restriction.\n    // Verify does not need it as we are doing simple memory lookup in  small\n    // sized table. May still be an issue unless we receive enough registrations\n    // to fill up memory.\n    const limit = this.block ? failureImpl(this.block) : recaptchaImpl(this.recaptcha);\n\n    passport.use(new LocalStrategy({\n      passReqToCallback: true,\n    }, this.strategyImpl.bind(this)));\n\n    app.all([`${prefix}/login.json`,\n        `${prefix}/verify.json`\n      ],\n      json,\n      limit,\n      passport.authenticate('local', this.authenticateOptions),\n      this.loggedIn());\n\n    // PASSWORDLESS LOGIN\n\n    if (this.emailSender)\n    {\n      app.all(`${prefix}/:theme.json`, json, limit, this.passwordlessImpl.bind(this));\n    }\n  }\n\n  /**\n   * helper method that creates a profile object from a credential address\n   */\n  async createProfileFromCredential(id, extra = {})\n  {\n    const profile = await super.createProfileFromCredential(id, extra);\n\n    if (extra.password && this.crypt)\n    {\n      profile.password = await this.crypt.hash(extra.password);\n    }\n\n    return profile;\n  }\n\n  /**\n   * Override of helper method that inserts password into produced user\n   * if allowed by setting.\n   *\n   * @override\n   */\n  createUserFromProfile(profile)\n  {\n    // we allow password setting\n    let user = super.createUserFromProfile(profile);\n\n    if (profile.password && this.allowPasswordSettingDuringRegistration)\n    {\n      user.password = profile.password;\n    }\n\n    return user;\n  }\n\n  /**\n   * Helper method that sends temporary password to an email address for rego/login.\n   *\n   * Should be able to override this to specify custom formats for email.\n   *\n   * @param {string} theme register | recover | passwordless etc. anything other than login or verify\n   * @param {string} to target email address\n   * @param {string} password temporary login token\n   * @param {number} expireMinutes number of minutes after which this login token will expire\n   * @param {string} [loginLinkPrefix] forward url for any links in email\n   */\n  sendTemporaryPassword(theme, to, password, expireMinutes, loginLinkPrefix)\n  {\n    let subject = `${this.applicationName}`;\n\n    switch (theme)\n    {\n    case 'register':\n      subject += ' Registration';\n      break;\n    case 'recover':\n      subject += ' Account Recovery';\n      break;\n    default:\n      subject += ' Login';\n      break;\n    }\n\n    let message = '';\n\n    message += `<p>You have received this email because someone requested access to the ${this.applicationName} using this email address.</p>\\n`;\n\n    if (theme === 'register' && loginLinkPrefix)\n    {\n      message += `<p>Use the following link to verify this email address and complete your registration: <a href=\"${loginLinkPrefix}${password}\">verify</a>.</p>\\n`;\n    }\n    else if (theme === 'recover' && loginLinkPrefix)\n    {\n      message += `<p>Use the following link to log into the system to change your password: <a href=\"${loginLinkPrefix}${password}\">login</a>.</p>\\n`;\n    }\n    else\n    if (loginLinkPrefix)\n    {\n      message += `<p>Use the following link to log into the system: <a href=\"${loginLinkPrefix}${password}\">login</a>.</p>\\n`;\n      message += `<p>Alternatively, you can use the following password: ${password}</p>\\n`;\n      message += `<p>Note: this link and password will expire within ${expireMinutes} minutes of request time.</p>\\n`;\n    }\n    else\n    {\n      message += `<p>Use the following password to log into the system: ${password}</p>\\n`;\n      message += `<p>Note: this password will expire within ${expireMinutes} minutes of request time.</p>\\n`;\n    }\n    message += `<p>If this is not you, please contact system administrators.</p>\\n`;\n    message += `<p>Kind Regards,</p>\\n`;\n    message += `<p>${this.applicationName} Team</p>\\n`;\n    message += `<p></p>\\n`;\n    message += `<p>WARNING: This is an automaticly generated email. Do not reploy to it.</p>\\n`;\n\n    return this.emailSender.send(to, this.fromAddress, subject, message);\n  }\n}\n\nmodule.exports = EmailAuth;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/auth/EmailAuth.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "audit",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~audit",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/EmailAuth.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "failureImpl",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~failureImpl",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/EmailAuth.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "generatePassword",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~generatePassword",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/EmailAuth.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "json",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~json",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/EmailAuth.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "recaptchaImpl",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~recaptchaImpl",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/EmailAuth.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "Auth",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~Auth",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/EmailAuth.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "LocalStrategy",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~LocalStrategy",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/EmailAuth.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "class",
    "name": "EmailAuth",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/EmailAuth.js",
    "importStyle": "EmailAuth",
    "description": "Email based login.\n\nRequies ```passport-local``` package.",
    "lineNumber": 18,
    "interface": false,
    "extends": [
      "Auth"
    ]
  },
  {
    "__docId__": 74,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "see Auth class + additional options for email configuration."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "options.tokenExpxiryMinutes",
        "description": "number of minutes to restrict token exchange to for passwordless login"
      }
    ]
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "emailSender",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth#emailSender",
    "access": "public",
    "description": "Instance of email sender class for sending emails.\n\nIf this is not specified, email login is disabled.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "EmailSender"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "crypt",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth#crypt",
    "access": "public",
    "description": "Instance of crypt class for encrypting and verifying passwords.",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Crypt"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "applicationName",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth#applicationName",
    "access": "public",
    "description": "Name of application.\nUsed for sending email.",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "fromAddress",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth#fromAddress",
    "access": "public",
    "description": "Email from address\nUsed for sending email.",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "tokenExpiryMilliseconds",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth#tokenExpiryMilliseconds",
    "access": "private",
    "description": "",
    "lineNumber": 65,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "block",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth#block",
    "access": "public",
    "description": "Settings for rate limiting failed requests.\n\nNote: use this or recaptcha.",
    "lineNumber": 72,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "recaptcha",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth#recaptcha",
    "access": "public",
    "description": "Settings for rate limiting through recaptcha.\n\nNote: use this or recaptcha.",
    "lineNumber": 79,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "allowPasswordSettingDuringRegistration",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth#allowPasswordSettingDuringRegistration",
    "access": "public",
    "description": "If true, it remembers any passwords specified registration.",
    "lineNumber": 97,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "tokens",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth#tokens",
    "access": "protected",
    "description": "login security tokens",
    "lineNumber": 104,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "strategyImpl",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth#strategyImpl",
    "access": "public",
    "description": "logs users in based on token or based on username(email)/password",
    "lineNumber": 110,
    "params": [
      {
        "name": "req",
        "types": [
          "*"
        ]
      },
      {
        "name": "username",
        "types": [
          "*"
        ]
      },
      {
        "name": "password",
        "types": [
          "*"
        ]
      },
      {
        "name": "done",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "passwordlessImpl",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth#passwordlessImpl",
    "access": "public",
    "description": "sends temporary login password to email address",
    "lineNumber": 188,
    "params": [
      {
        "name": "req",
        "types": [
          "*"
        ]
      },
      {
        "name": "res",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "install",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth#install",
    "access": "public",
    "description": "",
    "lineNumber": 220,
    "override": true,
    "params": [
      {
        "name": "app",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "passport",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "createProfileFromCredential",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth#createProfileFromCredential",
    "access": "public",
    "description": "helper method that creates a profile object from a credential address",
    "lineNumber": 251,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "extra",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "createUserFromProfile",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth#createUserFromProfile",
    "access": "public",
    "description": "Override of helper method that inserts password into produced user\nif allowed by setting.",
    "lineNumber": 269,
    "override": true,
    "params": [
      {
        "name": "profile",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "sendTemporaryPassword",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/EmailAuth.js~EmailAuth#sendTemporaryPassword",
    "access": "public",
    "description": "Helper method that sends temporary password to an email address for rego/login.\n\nShould be able to override this to specify custom formats for email.",
    "lineNumber": 293,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "theme",
        "description": "register | recover | passwordless etc. anything other than login or verify"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "target email address"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "temporary login token"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "expireMinutes",
        "description": "number of minutes after which this login token will expire"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "loginLinkPrefix",
        "description": "forward url for any links in email"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/auth/FacebookAuth.js",
    "content": "\"use strict\";\n\n\nconst Auth = require('./Auth');\nconst Strategy = require('passport-facebook')\n  .Strategy;\n\n/**\n * OAuth login using facebook login provider\n * \n * Requires ```passport-facebook``` package.\n */\nclass FacebookAuth extends Auth\n{\n\n  /**\n   * @param {object} options see Auth class + additional options for email configuration.\n   */\n  constructor(options = {})\n  {\n    super('facebook', options);\n    this.description.redirect = true;\n\n    /**\n     * OAuth 2 Client ID\n     */\n    this.facebookClientID = options.facebookClientID;\n\n    /**\n     * OAuth 2 Client Secret\n     */\n    this.facebookClientSecret = options.facebookClientSecret;\n  }\n\n  /**\n   * @override\n   */\n  install(app, prefix, passport)\n  {\n    passport.use(new Strategy({\n        clientID: this.facebookClientID,\n        clientSecret: this.facebookClientSecret,\n        callbackURL: `${prefix}/callback.json`,\n        scope: ['email', 'public_profile'],\n        state: true,\n        passReqToCallback: true,\n        proxy: true,\n      }, (req, accessToken, refreshToken, profile, done) =>\n      this.handleUserLoginByProfile(null, profile, done, req)));\n\n    app.all(`${prefix}/login.json`, passport.authenticate('facebook', {}));\n\n    app.all(`${prefix}/callback.json`, passport.authenticate('facebook', this.authenticateOptions), this.loggedIn(true));\n  }\n\n}\n\nmodule.exports = FacebookAuth;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/auth/FacebookAuth.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "Auth",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/FacebookAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/FacebookAuth.js~Auth",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/FacebookAuth.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "Strategy",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/FacebookAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/FacebookAuth.js~Strategy",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/FacebookAuth.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "class",
    "name": "FacebookAuth",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/FacebookAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/FacebookAuth.js~FacebookAuth",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/FacebookAuth.js",
    "importStyle": "FacebookAuth",
    "description": "OAuth login using facebook login provider\n\nRequires ```passport-facebook``` package.",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "Auth"
    ]
  },
  {
    "__docId__": 95,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/FacebookAuth.js~FacebookAuth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/FacebookAuth.js~FacebookAuth#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "see Auth class + additional options for email configuration."
      }
    ]
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "facebookClientID",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/FacebookAuth.js~FacebookAuth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/FacebookAuth.js~FacebookAuth#facebookClientID",
    "access": "public",
    "description": "OAuth 2 Client ID",
    "lineNumber": 27,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "facebookClientSecret",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/FacebookAuth.js~FacebookAuth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/FacebookAuth.js~FacebookAuth#facebookClientSecret",
    "access": "public",
    "description": "OAuth 2 Client Secret",
    "lineNumber": 32,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "install",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/FacebookAuth.js~FacebookAuth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/FacebookAuth.js~FacebookAuth#install",
    "access": "public",
    "description": "",
    "lineNumber": 38,
    "override": true,
    "params": [
      {
        "name": "app",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "passport",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/auth/GithubAuth.js",
    "content": "\"use strict\";\n\n\nconst Auth = require('./Auth');\nconst Strategy = require('passport-github2')\n  .Strategy;\n\n/**\n * OAuth login using githuhb login provider\n * \n * Requires ```passport-github2``` package.\n */\nclass GithubAuth extends Auth\n{\n  /**\n   * @param {object} options see Auth class + additional options for email configuration.\n   */\n  constructor(options = {})\n  {\n    super('github', options);\n    this.description.redirect = true;\n    /**\n     * OAuth 2 Client ID\n     */\n    this.githubClientID = options.githubClientID;\n    /**\n     * OAuth 2 Client Secret\n     */\n    this.githubClientSecret = options.githubClientSecret;\n  }\n\n  /**\n   * @override\n   */\n  install(app, prefix, passport)\n  {\n    passport.use(new Strategy({\n        clientID: this.githubClientID,\n        clientSecret: this.githubClientSecret,\n        callbackURL: `${prefix}/callback.json`,\n        passReqToCallback: true,\n        proxy: true,\n      }, (req, accessToken, refreshToken, profile, done) =>\n      this.handleUserLoginByProfile(null, profile, done, req)));\n\n    app.all(`${prefix}/login.json`, passport.authenticate('github', {\n      scope: ['user:email']\n    }));\n\n    app.all(`${prefix}/callback.json`, passport.authenticate('github', this.authenticateOptions), this.loggedIn(true));\n  }\n\n}\n\nmodule.exports = GithubAuth;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/auth/GithubAuth.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "Auth",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/GithubAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/GithubAuth.js~Auth",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/GithubAuth.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "Strategy",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/GithubAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/GithubAuth.js~Strategy",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/GithubAuth.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "class",
    "name": "GithubAuth",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/GithubAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/GithubAuth.js~GithubAuth",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/GithubAuth.js",
    "importStyle": "GithubAuth",
    "description": "OAuth login using githuhb login provider\n\nRequires ```passport-github2``` package.",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "Auth"
    ]
  },
  {
    "__docId__": 103,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/GithubAuth.js~GithubAuth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/GithubAuth.js~GithubAuth#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "see Auth class + additional options for email configuration."
      }
    ]
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "githubClientID",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/GithubAuth.js~GithubAuth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/GithubAuth.js~GithubAuth#githubClientID",
    "access": "public",
    "description": "OAuth 2 Client ID",
    "lineNumber": 25,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "githubClientSecret",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/GithubAuth.js~GithubAuth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/GithubAuth.js~GithubAuth#githubClientSecret",
    "access": "public",
    "description": "OAuth 2 Client Secret",
    "lineNumber": 29,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "install",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/GithubAuth.js~GithubAuth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/GithubAuth.js~GithubAuth#install",
    "access": "public",
    "description": "",
    "lineNumber": 35,
    "override": true,
    "params": [
      {
        "name": "app",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "passport",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/auth/GoogleAuth.js",
    "content": "\"use strict\";\n\n\nconst Auth = require('./Auth');\nconst Strategy = require('passport-google-oauth2')\n  .Strategy;\n\n/**\n * OAuth login using google login provider\n * \n * Requires ```passport-google-oauth2``` package.\n */\nclass GoogleAuth extends Auth\n{\n\n  /**\n   * @param {object} options see Auth class + additional options for email configuration.\n   */\n  constructor(options = {})\n  {\n    super('google', options);\n    this.description.redirect = true;\n\n    /**\n     * OAuth 2 Client ID\n     */\n    this.googleClientID = options.googleClientID;\n\n    /**\n     * OAuth 2 Client Secret\n     */\n    this.googleClientSecret = options.googleClientSecret;\n  }\n\n  /**\n   * @override\n   */\n  install(app, prefix, passport)\n  {\n    passport.use(new Strategy({\n        clientID: this.googleClientID,\n        clientSecret: this.googleClientSecret,\n        callbackURL: `${prefix}/callback.json`,\n        scope: ['email', 'profile'],\n        state: true,\n        passReqToCallback: true,\n        proxy: true,\n      }, (req, accessToken, refreshToken, profile, done) =>\n      this.handleUserLoginByProfile(null, profile, done, req)));\n\n    app.all(`${prefix}/login.json`, passport.authenticate('google', {}));\n\n    app.all(`${prefix}/callback.json`, passport.authenticate('google', this.authenticateOptions), this.loggedIn(true));\n  }\n\n}\n\nmodule.exports = GoogleAuth;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/auth/GoogleAuth.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "Auth",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/GoogleAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/GoogleAuth.js~Auth",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/GoogleAuth.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "Strategy",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/GoogleAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/GoogleAuth.js~Strategy",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/GoogleAuth.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "class",
    "name": "GoogleAuth",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/GoogleAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/GoogleAuth.js~GoogleAuth",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/GoogleAuth.js",
    "importStyle": "GoogleAuth",
    "description": "OAuth login using google login provider\n\nRequires ```passport-google-oauth2``` package.",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "Auth"
    ]
  },
  {
    "__docId__": 111,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/GoogleAuth.js~GoogleAuth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/GoogleAuth.js~GoogleAuth#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "see Auth class + additional options for email configuration."
      }
    ]
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "googleClientID",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/GoogleAuth.js~GoogleAuth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/GoogleAuth.js~GoogleAuth#googleClientID",
    "access": "public",
    "description": "OAuth 2 Client ID",
    "lineNumber": 27,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "googleClientSecret",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/GoogleAuth.js~GoogleAuth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/GoogleAuth.js~GoogleAuth#googleClientSecret",
    "access": "public",
    "description": "OAuth 2 Client Secret",
    "lineNumber": 32,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "install",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/GoogleAuth.js~GoogleAuth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/GoogleAuth.js~GoogleAuth#install",
    "access": "public",
    "description": "",
    "lineNumber": 38,
    "override": true,
    "params": [
      {
        "name": "app",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "passport",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/auth/LinkedinAuth.js",
    "content": "\"use strict\";\n\nconst Auth = require('./Auth');\nconst Strategy = require('passport-linkedin-oauth2')\n  .Strategy;\n\n/**\n * OAuth login using linkedin login provider\n * \n * Requires ```passport-linkedin-oauth2``` package.\n */\nclass LinkedinAuth extends Auth\n{\n\n  /**\n   * @param {object} options see Auth class + additional options for email configuration.\n   */\n  constructor(options = {})\n  {\n    super('linkedin', options);\n    this.description.redirect = true;\n\n    /**\n     * OAuth 2 Client ID\n     */\n    this.linkedinClientID = options.linkedinClientID;\n\n    /**\n     * OAuth 2 Client Secret\n     */\n    this.linkedinClientSecret = options.linkedinClientSecret;\n  }\n\n  /**\n   * @override\n   */\n  install(app, prefix, passport)\n  {\n    passport.use(new Strategy({\n        clientID: this.linkedinClientID,\n        clientSecret: this.linkedinClientSecret,\n        callbackURL: `${prefix}/callback.json`,\n        scope: ['r_emailaddress', 'r_basicprofile'],\n        state: true,\n        passReqToCallback: true,\n        proxy: true,\n      }, (req, accessToken, refreshToken, profile, done) =>\n      this.handleUserLoginByProfile(null, profile, done, req)));\n\n    app.all(`${prefix}/login.json`, passport.authenticate('linkedin', {}));\n\n    app.all(`${prefix}/callback.json`, passport.authenticate('linkedin', this.authenticateOptions), this.loggedIn(true));\n  }\n\n}\n\nmodule.exports = LinkedinAuth;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/auth/LinkedinAuth.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "Auth",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/LinkedinAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/LinkedinAuth.js~Auth",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/LinkedinAuth.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "Strategy",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/LinkedinAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/LinkedinAuth.js~Strategy",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/LinkedinAuth.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "class",
    "name": "LinkedinAuth",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/LinkedinAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/LinkedinAuth.js~LinkedinAuth",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/LinkedinAuth.js",
    "importStyle": "LinkedinAuth",
    "description": "OAuth login using linkedin login provider\n\nRequires ```passport-linkedin-oauth2``` package.",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "Auth"
    ]
  },
  {
    "__docId__": 119,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/LinkedinAuth.js~LinkedinAuth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/LinkedinAuth.js~LinkedinAuth#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "see Auth class + additional options for email configuration."
      }
    ]
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "linkedinClientID",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/LinkedinAuth.js~LinkedinAuth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/LinkedinAuth.js~LinkedinAuth#linkedinClientID",
    "access": "public",
    "description": "OAuth 2 Client ID",
    "lineNumber": 26,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "linkedinClientSecret",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/LinkedinAuth.js~LinkedinAuth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/LinkedinAuth.js~LinkedinAuth#linkedinClientSecret",
    "access": "public",
    "description": "OAuth 2 Client Secret",
    "lineNumber": 31,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "install",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/LinkedinAuth.js~LinkedinAuth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/LinkedinAuth.js~LinkedinAuth#install",
    "access": "public",
    "description": "",
    "lineNumber": 37,
    "override": true,
    "params": [
      {
        "name": "app",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "passport",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/auth/NoAuth.js",
    "content": "\"use strict\";\n\nconst Auth = require('./Auth');\nconst audit = require('../helper/audit');\n\n/**\n * Allows login without any form of credential exchange.\n * \n * Meant for testing / developer debugging etc.\n */\nclass NoAuth extends Auth\n{\n\n  /**\n   * @param {object} options options\n   * @param {string} [options.method='nothing'] method name\n   * @param {string} options.loginUserId id of user to give access of\n   */\n  constructor(options = {})\n  {\n    super(options.method || 'nothing', options);\n\n    /**\n     * @type string\n     */\n    this.loginUserId = options.loginUserId;\n  }\n\n  /**\n   * Make any request to /<method>/login.json to gain access.\n   * \n   * @override\n   */\n  install(app, prefix)\n  {\n    app.all(`${prefix}/login.json`, (req, res) =>\n    {\n      req.login({\n        id: this.loginUserId\n      }, function (err)\n      {\n        if (err)\n        {\n          res.error(`Login failed: ${err}`, audit.LOGIN_FAILURE);\n        }\n        else\n        {\n          res.success('Logged in', audit.LOGIN);\n        }\n      });\n    });\n  }\n}\n\nmodule.exports = NoAuth;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/auth/NoAuth.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "Auth",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/NoAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/NoAuth.js~Auth",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/NoAuth.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "audit",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/NoAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/NoAuth.js~audit",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/NoAuth.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "class",
    "name": "NoAuth",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/NoAuth.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/auth/NoAuth.js~NoAuth",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/auth/NoAuth.js",
    "importStyle": "NoAuth",
    "description": "Allows login without any form of credential exchange.\n\nMeant for testing / developer debugging etc.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "Auth"
    ]
  },
  {
    "__docId__": 127,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/NoAuth.js~NoAuth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/NoAuth.js~NoAuth#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'nothing'",
        "defaultRaw": "'nothing'",
        "name": "options.method",
        "description": "method name"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.loginUserId",
        "description": "id of user to give access of"
      }
    ]
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "loginUserId",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/NoAuth.js~NoAuth",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/NoAuth.js~NoAuth#loginUserId",
    "access": "public",
    "description": "",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "install",
    "memberof": "node-user-accounts-boilerplate-nahid/auth/NoAuth.js~NoAuth",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/auth/NoAuth.js~NoAuth#install",
    "access": "public",
    "description": "Make any request to /<method>/login.json to gain access.",
    "lineNumber": 34,
    "override": true,
    "params": [
      {
        "name": "app",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/crypt/Crypt.js",
    "content": "\"use strict\";\n\n/**\n * Abstract class for taking care of password hashing and verification.\n */\nclass Crypt\n{\n\n  /**\n   * Hash a password.\n   * \n   * @param {string} password Password to hash\n   * @return {string} Promise should return hash as string or error\n   */\n  async hash(password)\n  {\n    if (!password)\n    {\n      throw new Error('Empty password');\n    }\n\n    return await this.hashImplementation(password);\n  }\n\n  /**\n   * Implementation of hash() minus checks.\n   * \n   * @param {string} password_ Password to hash\n   * @return {string} Promise should return hash as string or error\n   * @abstract\n   */\n  async hashImplementation(password_)\n  {\n    throw new Error('TODO: Abstract method called');\n  }\n\n  /**\n   * Verify a password against previously hashed password\n   * \n   * @param {String} password Password to compare\n   * @param {String} hash Previously hashed password\n   * @return {boolean} Promise should return boolean result.\n   */\n  async verify(password, hash)\n  {\n    if (!password)\n    {\n      throw new Error('Empty password');\n    }\n    if (!hash)\n    {\n      throw new Error('Empty hash');\n    }\n\n    return await this.verifyImplementation(password, hash);\n  }\n\n  /**\n   * Implementation of verify() minus checks.\n   * \n   * Default implementation hashes new password and does string compare.\n   * This'll work for weaker hashes like md5 but won't work for stronger ones\n   * like scrypt.\n   * \n   * @param {String} password Password to compare\n   * @param {String} hash Previously hashed password\n   * @return {boolean} Promise should return boolean result.\n   */\n  async verifyImplementation(password, hash)\n  {\n    return hash === await this.hash(password);\n  }\n\n}\n\nmodule.exports = Crypt;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/crypt/Crypt.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "class",
    "name": "Crypt",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/Crypt.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/Crypt.js~Crypt",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/crypt/Crypt.js",
    "importStyle": "Crypt",
    "description": "Abstract class for taking care of password hashing and verification.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "hash",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/Crypt.js~Crypt",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/Crypt.js~Crypt#hash",
    "access": "public",
    "description": "Hash a password.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "Password to hash"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Promise should return hash as string or error"
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "hashImplementation",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/Crypt.js~Crypt",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/Crypt.js~Crypt#hashImplementation",
    "access": "public",
    "description": "Implementation of hash() minus checks.",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "password_",
        "description": "Password to hash"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Promise should return hash as string or error"
    },
    "abstract": true
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "verify",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/Crypt.js~Crypt",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/Crypt.js~Crypt#verify",
    "access": "public",
    "description": "Verify a password against previously hashed password",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "Password to compare"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "hash",
        "description": "Previously hashed password"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Promise should return boolean result."
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "verifyImplementation",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/Crypt.js~Crypt",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/Crypt.js~Crypt#verifyImplementation",
    "access": "public",
    "description": "Implementation of verify() minus checks.\n\nDefault implementation hashes new password and does string compare.\nThis'll work for weaker hashes like md5 but won't work for stronger ones\nlike scrypt.",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "Password to compare"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "hash",
        "description": "Previously hashed password"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Promise should return boolean result."
    }
  },
  {
    "__docId__": 136,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js",
    "content": "\"use strict\";\n\nconst Crypt = require('./Crypt');\nconst crypto = require('crypto');\n\n/**\n * Use crypto.pbkdf2\n * \n * implementation adapted from https://gist.github.com/skeggse/52672ddee97c8efec269\n */\nclass PBKDF2 extends Crypt\n{\n\n  /**\n   * @param {Object} [options={}]\n   * @param {String} [options.hashDigest=sha512] see https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback\n   * @param {Number} [options.hashBytes=512] see https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback\n   * @param {Number} [options.saltBytes=16] see https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback\n   * @param {Number} [options.iterations=10000] see https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback\n   */\n  constructor(options = {})\n  {\n    super();\n    this.hashDigest = options.hashDigest || 'sha512';\n    this.hashBytes = options.hashBytes || 512;\n    this.saltBytes = options.saltBytes || 16;\n    this.iterations = options.iterations || 10000;\n  }\n\n  /**\n   * @override\n   */\n  hashImplementation(password)\n  {\n    return new Promise((resolve, reject) =>\n    {\n      // generate a salt for pbkdf2\n      crypto.randomBytes(this.saltBytes, (err, salt) =>\n      {\n        if (err)\n        {\n          return reject(err);\n        }\n        crypto.pbkdf2(password, salt, this.iterations, this.hashBytes, this.hashDigest, (err, hash) =>\n        {\n          if (err)\n          {\n            console.log('XXX', err);\n\n            return reject(err);\n          }\n\n          let combined = new Buffer(hash.length + salt.length + 8);\n\n          // include the size of the salt so that we can, during verification,\n          // figure out how much of the hash is salt\n          combined.writeUInt32BE(salt.length, 0, true);\n          // similarly, include the iteration count\n          combined.writeUInt32BE(this.iterations, 4, true);\n          salt.copy(combined, 8);\n          hash.copy(combined, salt.length + 8);\n\n          resolve(combined.toString('hex'));\n        });\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  verifyImplementation(password, oldhash)\n  {\n    return new Promise((resolve, reject) =>\n    {\n      let combined = new Buffer(oldhash, 'hex');\n      // extract the salt and hash from the combined buffer\n      const saltBytes = combined.readUInt32BE(0);\n      const hashBytes = combined.length - saltBytes - 8;\n      const iterations = combined.readUInt32BE(4);\n      const salt = combined.slice(8, saltBytes + 8);\n      const hash = combined.toString('binary', saltBytes + 8);\n      // verify the salt and hash against the password\n\n      crypto.pbkdf2(password, salt, iterations, hashBytes, this.hashDigest, (err, verify) =>\n      {\n        if (err)\n        {\n          return reject(err);\n        }\n        resolve(verify.toString('binary') === hash);\n      });\n    });\n  }\n\n}\n\nmodule.exports = PBKDF2;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 137,
    "kind": "variable",
    "name": "Crypt",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js~Crypt",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "variable",
    "name": "crypto",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js~crypto",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 139,
    "kind": "class",
    "name": "PBKDF2",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js~PBKDF2",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js",
    "importStyle": "PBKDF2",
    "description": "Use crypto.pbkdf2\n\nimplementation adapted from https://gist.github.com/skeggse/52672ddee97c8efec269",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "Crypt"
    ]
  },
  {
    "__docId__": 140,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js~PBKDF2",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js~PBKDF2#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "sha512",
        "defaultRaw": "sha512",
        "name": "options.hashDigest",
        "description": "see https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "512",
        "defaultRaw": 512,
        "name": "options.hashBytes",
        "description": "see https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "16",
        "defaultRaw": 16,
        "name": "options.saltBytes",
        "description": "see https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10000",
        "defaultRaw": 10000,
        "name": "options.iterations",
        "description": "see https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback"
      }
    ]
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "hashDigest",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js~PBKDF2",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js~PBKDF2#hashDigest",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "hashBytes",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js~PBKDF2",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js~PBKDF2#hashBytes",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "saltBytes",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js~PBKDF2",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js~PBKDF2#saltBytes",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "iterations",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js~PBKDF2",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js~PBKDF2#iterations",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "hashImplementation",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js~PBKDF2",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js~PBKDF2#hashImplementation",
    "access": "public",
    "description": "",
    "lineNumber": 33,
    "override": true,
    "params": [
      {
        "name": "password",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "verifyImplementation",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js~PBKDF2",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/PBKDF2.js~PBKDF2#verifyImplementation",
    "access": "public",
    "description": "",
    "lineNumber": 72,
    "override": true,
    "params": [
      {
        "name": "password",
        "types": [
          "*"
        ]
      },
      {
        "name": "oldhash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/crypt/SCRYPT.js",
    "content": "\"use strict\";\n\nconst Crypt = require('./Crypt');\nconst scrypt = require(\"scrypt\");\n\n/**\n * Use scrypt.\n * \n * Requires scrypt (npm install scrypt).\n */\nclass SCRYPT extends Crypt\n{\n\n  /**\n   * @param {Object} [options={}]\n   * @param {Number} [options.maxtime=0.1] see https://www.npmjs.com/package/scrypt#params\n   */\n  constructor(options = {})\n  {\n    super();\n    this.params = scrypt.paramsSync(options.maxtime || 0.1);\n  }\n\n  /**\n   * @override\n   */\n  async hashImplementation(password)\n  {\n    const result = await scrypt.kdf(password, this.params);\n\n\n    return result.toString('hex');\n  }\n\n  /**\n   * @override\n   */\n  async verifyImplementation(password, hash)\n  {\n    return await scrypt.verifyKdf(new Buffer(hash, \"hex\"), password)\n  }\n\n}\n\nmodule.exports = SCRYPT;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/crypt/SCRYPT.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "Crypt",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/SCRYPT.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/SCRYPT.js~Crypt",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/crypt/SCRYPT.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "scrypt",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/SCRYPT.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/SCRYPT.js~scrypt",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/crypt/SCRYPT.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 150,
    "kind": "class",
    "name": "SCRYPT",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/SCRYPT.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/SCRYPT.js~SCRYPT",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/crypt/SCRYPT.js",
    "importStyle": "SCRYPT",
    "description": "Use scrypt.\n\nRequires scrypt (npm install scrypt).",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "Crypt"
    ]
  },
  {
    "__docId__": 151,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/SCRYPT.js~SCRYPT",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/SCRYPT.js~SCRYPT#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.1",
        "defaultRaw": 0.1,
        "name": "options.maxtime",
        "description": "see https://www.npmjs.com/package/scrypt#params"
      }
    ]
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "params",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/SCRYPT.js~SCRYPT",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/SCRYPT.js~SCRYPT#params",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "hashImplementation",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/SCRYPT.js~SCRYPT",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/SCRYPT.js~SCRYPT#hashImplementation",
    "access": "public",
    "description": "",
    "lineNumber": 27,
    "override": true,
    "params": [
      {
        "name": "password",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "verifyImplementation",
    "memberof": "node-user-accounts-boilerplate-nahid/crypt/SCRYPT.js~SCRYPT",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/crypt/SCRYPT.js~SCRYPT#verifyImplementation",
    "access": "public",
    "description": "",
    "lineNumber": 38,
    "override": true,
    "params": [
      {
        "name": "password",
        "types": [
          "*"
        ]
      },
      {
        "name": "hash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/email/EmailFilter.js",
    "content": "\"use strict\";\n\n/**\n * An email filter validates an email address\n */\nclass EmailFilter\n{\n\n  /**\n   * @param {string} name name of filter\n   */\n  constructor(name)\n  {\n\n    /**\n     * name of filter\n     * @type {string}\n     */\n    this.name = name;\n  }\n\n  /**\n   * @param {string} address_ address to validate\n   */\n  async doesAllow(address_)\n  {\n    throw new Error('TODO: Implement filter');\n  }\n}\n\nmodule.exports = EmailFilter;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/email/EmailFilter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 156,
    "kind": "class",
    "name": "EmailFilter",
    "memberof": "node-user-accounts-boilerplate-nahid/email/EmailFilter.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/email/EmailFilter.js~EmailFilter",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/email/EmailFilter.js",
    "importStyle": "EmailFilter",
    "description": "An email filter validates an email address",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 157,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-user-accounts-boilerplate-nahid/email/EmailFilter.js~EmailFilter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/email/EmailFilter.js~EmailFilter#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of filter"
      }
    ]
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "name",
    "memberof": "node-user-accounts-boilerplate-nahid/email/EmailFilter.js~EmailFilter",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/email/EmailFilter.js~EmailFilter#name",
    "access": "public",
    "description": "name of filter",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "doesAllow",
    "memberof": "node-user-accounts-boilerplate-nahid/email/EmailFilter.js~EmailFilter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/email/EmailFilter.js~EmailFilter#doesAllow",
    "access": "public",
    "description": "",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "address_",
        "description": "address to validate"
      }
    ],
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/email/EmailSender.js",
    "content": "\"use strict\";\n\n/**\n * An email sender sends an email\n */\nclass EmailSender\n{\n  constructor()\n  {\n\n    /**\n     * Filters to validate address with before sending emails to.\n     * @type {Array<EmailFilter>}\n     */\n    this.filters = [];\n  }\n\n  /**\n   * Send an email. This performs various checks and calls sendImplementation\n   * \n   * @param {string} to where to send email\n   * @param {string} from reply address\n   * @param {string} subject subject of email\n   * @param {string} body content of email\n   */\n  async send(to, from, subject, body)\n  {\n    for (let filter of this.filters)\n    {\n      if (!await filter.doesAllow(to))\n      {\n        throw new Error(`${filter.name} does not allow specified email address: '${to}'.`);\n      }\n    }\n    await this.sendImplementation(to, from, subject, body);\n  }\n\n  /**\n   * @abstract\n   * \n   * @param {string} to where to send email\n   * @param {string} from reply address\n   * @param {string} subject subject of email\n   * @param {string} body content of email\n   */\n  async sendImplementation(to_, from_, subject_, body_)\n  {\n    throw new Error('TODO: not implemented');\n  }\n}\n\nmodule.exports = EmailSender;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/email/EmailSender.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "class",
    "name": "EmailSender",
    "memberof": "node-user-accounts-boilerplate-nahid/email/EmailSender.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/email/EmailSender.js~EmailSender",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/email/EmailSender.js",
    "importStyle": "EmailSender",
    "description": "An email sender sends an email",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 162,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-user-accounts-boilerplate-nahid/email/EmailSender.js~EmailSender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/email/EmailSender.js~EmailSender#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "filters",
    "memberof": "node-user-accounts-boilerplate-nahid/email/EmailSender.js~EmailSender",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/email/EmailSender.js~EmailSender#filters",
    "access": "public",
    "description": "Filters to validate address with before sending emails to.",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "Array<EmailFilter>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "send",
    "memberof": "node-user-accounts-boilerplate-nahid/email/EmailSender.js~EmailSender",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/email/EmailSender.js~EmailSender#send",
    "access": "public",
    "description": "Send an email. This performs various checks and calls sendImplementation",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "where to send email"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "reply address"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "subject of email"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "content of email"
      }
    ],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "sendImplementation",
    "memberof": "node-user-accounts-boilerplate-nahid/email/EmailSender.js~EmailSender",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/email/EmailSender.js~EmailSender#sendImplementation",
    "access": "public",
    "description": "",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "where to send email"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "reply address"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "subject of email"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "content of email"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/email/NoEmailSender.js",
    "content": "\"use strict\";\n\nconst EmailSender = require('./EmailSender');\n\n/**\n * Stub email sending that prints to console instead of sending email.\n */\nclass NodeEmailSender extends EmailSender\n{\n  sendImplementation(to, from, subject, body)\n  {\n    return new Promise((resolve) =>\n    {\n      console.log('EMAIL FROM:', from);\n      console.log('EMAIL TO:', to);\n      console.log('EMAIL SUBJECT:', subject);\n      console.log('EMAIL BODY:', body);\n      resolve();\n    });\n  }\n}\n\nmodule.exports = NodeEmailSender;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/email/NoEmailSender.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "variable",
    "name": "EmailSender",
    "memberof": "node-user-accounts-boilerplate-nahid/email/NoEmailSender.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/email/NoEmailSender.js~EmailSender",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/email/NoEmailSender.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "class",
    "name": "NodeEmailSender",
    "memberof": "node-user-accounts-boilerplate-nahid/email/NoEmailSender.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/email/NoEmailSender.js~NodeEmailSender",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/email/NoEmailSender.js",
    "importStyle": "NodeEmailSender",
    "description": "Stub email sending that prints to console instead of sending email.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "EmailSender"
    ]
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "sendImplementation",
    "memberof": "node-user-accounts-boilerplate-nahid/email/NoEmailSender.js~NodeEmailSender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/email/NoEmailSender.js~NodeEmailSender#sendImplementation",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "to",
        "types": [
          "*"
        ]
      },
      {
        "name": "from",
        "types": [
          "*"
        ]
      },
      {
        "name": "subject",
        "types": [
          "*"
        ]
      },
      {
        "name": "body",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/email/NodeEmailSender.js",
    "content": "\"use strict\";\n\nconst EmailSender = require('./EmailSender');\nconst callback = require('../helper/callback');\nlet sendmail = require('sendmail');\n\nsendmail = sendmail();\n\n/**\n * Send email using node.js sendmail.\n * \n * Requires ```sendmail``` package.\n */\nclass NodeEmailSender extends EmailSender\n{\n  sendImplementation(to, from, subject, body)\n  {\n    return callback(sendmail, {\n      from,\n      to,\n      subject,\n      html: body,\n    });\n  }\n}\n\nmodule.exports = NodeEmailSender;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/email/NodeEmailSender.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "name": "EmailSender",
    "memberof": "node-user-accounts-boilerplate-nahid/email/NodeEmailSender.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/email/NodeEmailSender.js~EmailSender",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/email/NodeEmailSender.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 172,
    "kind": "variable",
    "name": "callback",
    "memberof": "node-user-accounts-boilerplate-nahid/email/NodeEmailSender.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/email/NodeEmailSender.js~callback",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/email/NodeEmailSender.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 173,
    "kind": "variable",
    "name": "sendmail",
    "memberof": "node-user-accounts-boilerplate-nahid/email/NodeEmailSender.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/email/NodeEmailSender.js~sendmail",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/email/NodeEmailSender.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 174,
    "kind": "class",
    "name": "NodeEmailSender",
    "memberof": "node-user-accounts-boilerplate-nahid/email/NodeEmailSender.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/email/NodeEmailSender.js~NodeEmailSender",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/email/NodeEmailSender.js",
    "importStyle": "NodeEmailSender",
    "description": "Send email using node.js sendmail.\n\nRequires ```sendmail``` package.",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "EmailSender"
    ]
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "sendImplementation",
    "memberof": "node-user-accounts-boilerplate-nahid/email/NodeEmailSender.js~NodeEmailSender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/email/NodeEmailSender.js~NodeEmailSender#sendImplementation",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "to",
        "types": [
          "*"
        ]
      },
      {
        "name": "from",
        "types": [
          "*"
        ]
      },
      {
        "name": "subject",
        "types": [
          "*"
        ]
      },
      {
        "name": "body",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/email/SESEmailSender.js",
    "content": "\"use strict\";\n\nconst EmailSender = require('./EmailSender');\nconst AWS = require('aws-sdk');\nconst callback = require('../helper/callback');\n\n/**\n * Send email using AWS SES.\n * \n * Requires ```aws-sdk``` package.\n */\nclass SESEmailSender extends EmailSender\n{\n  constructor(region)\n  {\n    super();\n    AWS.config.update({\n      region\n    });\n    this.ses = new AWS.SES({\n      apiVersion: '2010-12-01'\n    });\n  }\n\n  sendImplementation(to, from, subject, body)\n  {\n    const packet = {\n      Source: from,\n      Destination: {\n        ToAddresses: [to]\n      },\n      Message: {\n        Subject: {\n          Data: subject\n        },\n        Body: {\n          Html: {\n            Data: body,\n          }\n        }\n      }\n    };\n\n\n    return callback(this.ses.sendEmail.bind(this.ses), packet);\n  }\n}\n\nmodule.exports = SESEmailSender;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/email/SESEmailSender.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 177,
    "kind": "variable",
    "name": "EmailSender",
    "memberof": "node-user-accounts-boilerplate-nahid/email/SESEmailSender.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/email/SESEmailSender.js~EmailSender",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/email/SESEmailSender.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 178,
    "kind": "variable",
    "name": "AWS",
    "memberof": "node-user-accounts-boilerplate-nahid/email/SESEmailSender.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/email/SESEmailSender.js~AWS",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/email/SESEmailSender.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "callback",
    "memberof": "node-user-accounts-boilerplate-nahid/email/SESEmailSender.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/email/SESEmailSender.js~callback",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/email/SESEmailSender.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "class",
    "name": "SESEmailSender",
    "memberof": "node-user-accounts-boilerplate-nahid/email/SESEmailSender.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/email/SESEmailSender.js~SESEmailSender",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/email/SESEmailSender.js",
    "importStyle": "SESEmailSender",
    "description": "Send email using AWS SES.\n\nRequires ```aws-sdk``` package.",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "EmailSender"
    ]
  },
  {
    "__docId__": 181,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-user-accounts-boilerplate-nahid/email/SESEmailSender.js~SESEmailSender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/email/SESEmailSender.js~SESEmailSender#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "ses",
    "memberof": "node-user-accounts-boilerplate-nahid/email/SESEmailSender.js~SESEmailSender",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/email/SESEmailSender.js~SESEmailSender#ses",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "sendImplementation",
    "memberof": "node-user-accounts-boilerplate-nahid/email/SESEmailSender.js~SESEmailSender",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/email/SESEmailSender.js~SESEmailSender#sendImplementation",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "to",
        "types": [
          "*"
        ]
      },
      {
        "name": "from",
        "types": [
          "*"
        ]
      },
      {
        "name": "subject",
        "types": [
          "*"
        ]
      },
      {
        "name": "body",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/fields/default.js",
    "content": "\nmodule.exports.order = 0;\nmodule.exports.type = 'string';\nmodule.exports.assign = async function(user, field, value, fieldMeta, loginUser)\n{\n  if (typeof value !== this.type)\n  {\n    throw new Error(`${field} value is not ${this.type}`);\n  }\n  user[field] = value;\n};\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/fields/default.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "name": "order",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/default.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/default.js~order",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/default.js",
    "importStyle": "{order}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "variable",
    "name": "type",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/default.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/default.js~type",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/default.js",
    "importStyle": "{type}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "function",
    "name": "assign",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/default.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/default.js~assign",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/default.js",
    "importStyle": "{assign}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "user",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "fieldMeta",
        "types": [
          "*"
        ]
      },
      {
        "name": "loginUser",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 188,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/fields/defaultFields.js",
    "content": "\nmodule.exports = {\n  displayName: require('./displayName'),\n  roles: require('./roles')\n};\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/fields/defaultFields.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/fields/disabled.js",
    "content": "\nmodule.exports.order = 1000;\nmodule.exports.type = 'string';\nmodule.exports.assign = async function(user, field, value, fieldMeta, loginUser)\n{\n  throw new Error(`${field} is disabled.`);\n};\nmodule.exports.enabled = false;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/fields/disabled.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "name": "order",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/disabled.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/disabled.js~order",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/disabled.js",
    "importStyle": "{order}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "variable",
    "name": "type",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/disabled.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/disabled.js~type",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/disabled.js",
    "importStyle": "{type}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "assign",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/disabled.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/disabled.js~assign",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/disabled.js",
    "importStyle": "{assign}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "user",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "fieldMeta",
        "types": [
          "*"
        ]
      },
      {
        "name": "loginUser",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 193,
    "kind": "variable",
    "name": "enabled",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/disabled.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/disabled.js~enabled",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/disabled.js",
    "importStyle": "{enabled}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/fields/displayName.js",
    "content": "\nmodule.exports = require('./default');\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/fields/displayName.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/fields/password.js",
    "content": "\"use strict\";\n\nmodule.exports.order = 50;\nmodule.exports.type = 'string';\nmodule.exports.mask = true;\nmodule.exports.assign = async function(user, field, value, fieldMeta, loginUser, config)\n{\n  if (loginUser.id !== user.id || typeof value === 'boolean' || value === '')\n  {\n    delete user[field];\n    return\n  }\n\n  if (typeof value !== this.type)\n  {\n    throw new Error(`${field} value is not ${this.type}`);\n  }\n\n  if (value.length === 0)\n  {\n    throw new Error(`${field} value is empty`);\n  }\n\n  if (!config.crypt)\n  {\n    throw new Error('A crypt is not configured');\n  }\n\n  const hash = config.crypt.hash(value);\n\n  user[field] = hash;\n};\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/fields/password.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "variable",
    "name": "order",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/password.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/password.js~order",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/password.js",
    "importStyle": "{order}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "variable",
    "name": "type",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/password.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/password.js~type",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/password.js",
    "importStyle": "{type}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "variable",
    "name": "mask",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/password.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/password.js~mask",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/password.js",
    "importStyle": "{mask}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "function",
    "name": "assign",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/password.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/password.js~assign",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/password.js",
    "importStyle": "{assign}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "user",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "fieldMeta",
        "types": [
          "*"
        ]
      },
      {
        "name": "loginUser",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/fields/roles.js",
    "content": "\"use strict\";\n\nmodule.exports.order = 100;\nmodule.exports.type = 'object';\nmodule.exports.self = false;\nmodule.exports.assign = async function(user, field, value, fieldMeta, loginUser, config)\n{\n  user[field] = value;\n};\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/fields/roles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 201,
    "kind": "variable",
    "name": "order",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/roles.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/roles.js~order",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/roles.js",
    "importStyle": "{order}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "variable",
    "name": "type",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/roles.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/roles.js~type",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/roles.js",
    "importStyle": "{type}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "variable",
    "name": "self",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/roles.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/roles.js~self",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/roles.js",
    "importStyle": "{self}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "function",
    "name": "assign",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/roles.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/roles.js~assign",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/roles.js",
    "importStyle": "{assign}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "user",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "fieldMeta",
        "types": [
          "*"
        ]
      },
      {
        "name": "loginUser",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 205,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/fields/strongPassword.js",
    "content": "\"use strict\";\n\nconst password = require('./password');\n\nmodule.exports = Object.assign({}, password);\n\nmodule.exports.assign = async function(user, field, value, fieldMeta, loginUser, config)\n{\n  if (typeof value === 'string' && value !== '')\n  {\n    this.checkStrongPassword(value);\n  }\n  await password.assign.call(this, user, field, value, fieldMeta, loginUser, config);\n};\n\nconst sequences = [\n  'abcdefghijklmnopqrstuvwxyz',\n  'pyfgcrlaoeuidhtnsqjkxbmwvz',\n  '0123456789',\n  'qwertyuiop[]asdfghjkl;\\'zxcvbnm,./',\n  '!@#$%^&*()_+'\n];\n\nfunction findMaxSequenceSize(password)\n{\n  var maxSequence = 0;\n\n  password = password.toLowerCase();\n\n  sequences.forEach(function(sequence)\n  {\n    var converted = Array.prototype.map.call(password, function(c)\n    {\n      return sequence.indexOf(c);\n    });\n    var progressiveSize = 1;\n    var sameSize = 1;\n    for (var x = 1; x < converted.length; x++)\n    {\n      if (converted[x] === converted[x - 1] && converted[x] !== -1)\n      {\n        sameSize++;\n      }\n      else\n      {\n         if (sameSize > maxSequence)\n         {\n           maxSequence = sameSize;\n         }\n         sameSize = 1;\n      }\n      if (converted[x] === converted[x - 1] + 1 && converted[x - 1] !== -1)\n      {\n        progressiveSize++;\n      }\n      else\n      {\n         if (progressiveSize > maxSequence)\n         {\n           maxSequence = progressiveSize;\n         }\n         progressiveSize = 1;\n      }\n    }\n    if (sameSize > maxSequence)\n    {\n      maxSequence = sameSize;\n    }\n    if (progressiveSize > maxSequence)\n    {\n      maxSequence = progressiveSize;\n    }\n  });\n  return maxSequence;\n}\n\nmodule.exports.checkStrongPassword = function(password)\n{\n  if (password.length > 12)\n  {\n    return true;\n  }\n\n  if (!password || password.length < 10)\n  {\n    throw new Error('Password must be provided and must be at least 10 characters. Must consist of lowercase, uppercase letters, numbers, symbols. Must not contain spaces. Must not be sequential.');\n  }\n\n  if (!password.match(/[a-z]+/))\n  {\n    throw new Error('Password must consist of lowercase, uppercase letters, numbers and symbols.');\n  }\n\n  if (!password.match(/[A-Z]+/))\n  {\n    throw new Error('Password must consist of lowercase, uppercase letters, numbers and symbols.');\n  }\n\n  if (!password.match(/[0-9]+/))\n  {\n    throw new Error('Password must consist of lowercase, uppercase letters, numbers and symbols.');\n  }\n\n  if (!password.match(/[^a-zA-Z0-9]+/))\n  {\n    throw new Error('Password must consist of lowercase, uppercase letters, numbers and symbols.');\n  }\n\n  if (password.match(/\\s+/))\n  {\n    throw new Error('Password must not consist whitespace characters');\n  }\n\n  if (findMaxSequenceSize(password) > 2)\n  {\n    throw new Error('Password must not consist of sequences of size greater than 2.');\n  }\n\n  return true;\n}\n\n/**\n * generate strong password\n * @param {number} [length=10] length of password to generate\n * @return {string}\n */\nmodule.exports.generate = function generate(length = 10)\n{\n  const groups = [\n    '0123456789',\n    'abcdefghijklmnopqrstuvwxyz',\n    'ABCDEFGJIJKLMNOPQRSTUVWXYZ',\n    '!@$%^*_'\n  ];\n\n  let availableOrder = [0, 1, 2, 3];\n  let order = [];\n\n  while (availableOrder.length > 0)\n  {\n    order.push(availableOrder.splice(Math.floor(Math.random() * availableOrder.length), 1)[0]);\n  }\n\n  let password = '';\n\n  for (let i = 0; i < length; i++)\n  {\n    let currentGroup = groups[i % groups.length];\n\n    password += currentGroup[Math.floor(Math.random() * currentGroup.length)];\n  }\n\n  return password;\n}\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/fields/strongPassword.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 206,
    "kind": "variable",
    "name": "password",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/strongPassword.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/strongPassword.js~password",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/strongPassword.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 207,
    "kind": "function",
    "name": "assign",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/strongPassword.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/strongPassword.js~assign",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/strongPassword.js",
    "importStyle": "{assign}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "user",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "fieldMeta",
        "types": [
          "*"
        ]
      },
      {
        "name": "loginUser",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "variable",
    "name": "sequences",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/strongPassword.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/strongPassword.js~sequences",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/strongPassword.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 209,
    "kind": "function",
    "name": "findMaxSequenceSize",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/strongPassword.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/strongPassword.js~findMaxSequenceSize",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/strongPassword.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "password",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "checkStrongPassword",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/strongPassword.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/strongPassword.js~checkStrongPassword",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/strongPassword.js",
    "importStyle": "{checkStrongPassword}",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "password",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "function",
    "name": "generate",
    "memberof": "node-user-accounts-boilerplate-nahid/fields/strongPassword.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/fields/strongPassword.js~generate",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/fields/strongPassword.js",
    "importStyle": "{generate}",
    "description": "generate strong password",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "length",
        "description": "length of password to generate"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 212,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/filters/parse.js",
    "content": "\"use strict\";\n\n\nfunction parseFieldValues(output, searchField, field, values)\n{\n  for (let value of values)\n  {\n    if (searchField.filters && searchField.filters.length > 0)\n    {\n      let filter = searchField.filters[0];\n\n      if (value.match(/^[a-z0-9]+:/))\n      {\n        let index = value.indexOf(':');\n\n        filter = value.substr(0, index);\n        if (searchField.filters.indexOf(filter) === -1)\n        {\n          filter = searchField.filters[0];\n        }\n        else\n        {\n          value = value.substr(index + 1);\n        }\n      }\n      if (filter !== 'regex')\n      {\n        value = value.split('|');\n      }\n      else\n      {\n        value = [value];\n      }\n      if (searchField.enum)\n      {\n        value = value.filter((v) => v.length > 0 && searchField.enum.indexOf(v) !== -1);\n      }\n      output.filter.push({\n        field: searchField.searchField || field,\n        filter,\n        value\n      });\n    }\n  }\n}\n\nfunction getDefaultOutput(searchMetadata)\n{\n  return {\n    offset: 0,\n    limit: searchMetadata && searchMetadata.limit && searchMetadata.limit.default ? searchMetadata.limit.default : 20,\n    filter: [],\n    sort: false,\n    order: 'asc',\n    extra: [],\n    returnFacets: false\n  };\n}\n\n/**\n * Validate and parse Request.query against what is acceptable from a SearchMetadata specification\n * \n * @param {SearchMetadata} searchMetadata\n * @param {Query} query\n * @return {ParsedQuery} will validated and parsed query filters\n */\nfunction parse(searchMetadata, query)\n{\n  let output = getDefaultOutput(searchMetadata);\n  // process query fields\n\n  Object.keys(query)\n    .sort()\n    .forEach((field) =>\n    {\n      // filters\n      if (searchMetadata.fields)\n      {\n        let searchField = searchMetadata.fields && searchMetadata.fields[field];\n\n        if (searchField)\n        {\n          let values = query[field];\n\n          if (!Array.isArray(values))\n          {\n            values = [values];\n          }\n          parseFieldValues(output, searchField, field, values);\n        }\n      }\n      // paging\n      if (field === 'offset')\n      {\n        console.log();\n        output.offset = Math.max(0, parseInt(query.offset));\n      }\n      else if (field === 'limit' && searchMetadata.limit)\n      {\n        output.limit = Math.max(searchMetadata.limit.minimum, Math.min(searchMetadata.limit.maximum, parseInt(query.limit)));\n      }\n      // sorting\n      else if (field === 'sort')\n      {\n        if (searchMetadata.sort && searchMetadata.sort.indexOf(query.sort) !== -1)\n        {\n          output.sort = query.sort;\n        }\n      }\n      else if (field === 'order')\n      {\n        output.order = query.order.substr(0, 1) !== 'd' ? 'asc' : 'dsc';\n      }\n      // facets and extra columns\n      else if (field === 'extra')\n      {\n        output.extra = query.extra.split(/\\|/g)\n          .filter((x) => x);\n      }\n      else if (field === 'facets' && searchMetadata.facets)\n      {\n        output.returnFacets = true;\n      }\n    });\n\n  return output;\n}\n\nmodule.exports = parse;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/filters/parse.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 213,
    "kind": "function",
    "name": "parseFieldValues",
    "memberof": "node-user-accounts-boilerplate-nahid/filters/parse.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/filters/parse.js~parseFieldValues",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/filters/parse.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "output",
        "types": [
          "*"
        ]
      },
      {
        "name": "searchField",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 214,
    "kind": "function",
    "name": "getDefaultOutput",
    "memberof": "node-user-accounts-boilerplate-nahid/filters/parse.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/filters/parse.js~getDefaultOutput",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/filters/parse.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "searchMetadata",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"offset\": *, \"limit\": *, \"filter\": *, \"sort\": *, \"order\": string, \"extra\": *, \"returnFacets\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 215,
    "kind": "function",
    "name": "parse",
    "memberof": "node-user-accounts-boilerplate-nahid/filters/parse.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/filters/parse.js~parse",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/filters/parse.js",
    "importStyle": "parse",
    "description": "Validate and parse Request.query against what is acceptable from a SearchMetadata specification",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "SearchMetadata"
        ],
        "spread": false,
        "optional": false,
        "name": "searchMetadata",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Query"
        ],
        "spread": false,
        "optional": false,
        "name": "query",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ParsedQuery"
      ],
      "spread": false,
      "description": "will validated and parsed query filters"
    }
  },
  {
    "__docId__": 216,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/helper/access.js",
    "content": "\"use strict\";\n\nconst AUDIT_PERMISSION_ERROR = 'SESSION_PERMISSION_ERROR';\n\nmodule.exports.AUDIT_PERMISSION_ERROR = AUDIT_PERMISSION_ERROR;\n\n/**\n * Express middleware for blocking non-logged in users\n */\nmodule.exports.LOGGEDIN = function (req, res, next)\n{\n  if (req.user)\n  {\n    return next();\n  }\n  res.error('Must be logged in', AUDIT_PERMISSION_ERROR);\n};\n\n/**\n * Express middleware generator for blocking non-logged in users or users that do not have one of the specified roles\n * @param {object} roles map of roles\n * @return {ExpressMiddlewareFunction}\n */\nmodule.exports.ROLE_ONE_OF = function (roles)\n{\n  return function (req, res, next)\n  {\n    if (req.user)\n    {\n      let userRoles = req.user.roles || {};\n\n      for (let role in userRoles)\n      {\n        if (userRoles[role] && roles[role])\n        {\n          return next();\n        }\n      }\n      req.audit(AUDIT_PERMISSION_ERROR, 'MUST HAVE', JSON.stringify(roles), 'HAVE', JSON.stringify(req.user && req.user.roles || null));\n      res.error('Must have access');\n    }\n    else\n    {\n      res.error('Must be logged in', AUDIT_PERMISSION_ERROR);\n    }\n  };\n};\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/helper/access.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 217,
    "kind": "variable",
    "name": "AUDIT_PERMISSION_ERROR",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/access.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/access.js~AUDIT_PERMISSION_ERROR",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/access.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 218,
    "kind": "function",
    "name": "LOGGEDIN",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/access.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/access.js~LOGGEDIN",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/access.js",
    "importStyle": "{LOGGEDIN}",
    "description": "Express middleware for blocking non-logged in users",
    "lineNumber": 10,
    "params": [
      {
        "name": "req",
        "types": [
          "*"
        ]
      },
      {
        "name": "res",
        "types": [
          "*"
        ]
      },
      {
        "name": "next",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "function",
    "name": "ROLE_ONE_OF",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/access.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/access.js~ROLE_ONE_OF",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/access.js",
    "importStyle": null,
    "description": "Express middleware generator for blocking non-logged in users or users that do not have one of the specified roles",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "roles",
        "description": "map of roles"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExpressMiddlewareFunction"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 220,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/helper/audit.js",
    "content": "\"use strict\";\n\n/**\n * Fill in method for audit logging\n * \n * Use as req.audit(...) or res.audit(...)\n * \n * @param {string} source source of event. e.g. user or ip\n * @param {string} event type of event. e.g. user or ip\n * @param {string} params data associated with event\n */\nfunction audit(source, event, ...params)\n{\n  try\n  {\n    console.log('AUDIT', (new Date())\n      .toISOString(), source, event, params.join(' '));\n  }\n  catch (e)\n  {\n    try\n    {\n      console.log('Exception during audit', e);\n    }\n    catch (ee)\n    {}\n  }\n}\n\n/**\n * Audit event type constants.\n */\nconst notifications = {\n  OPERATION_SUCCESS: 'OPERATION_SUCCESS',\n  OPERATION_FAILURE: 'OPERATION_FAILURE',\n  OPERATION_START: 'OPERATION_START',\n  EXCEPTION: 'ERROR_EXCEPTION',\n  UNEXPECTED_ERROR: 'ERROR_UNEXPECTED',\n  INVALID_REQUEST: 'ERROR_INVALID_REQUEST',\n  LOGIN: 'SESSION_LOGIN',\n  LOGOUT: 'SESSION_LOGOUT',\n  PERMISSION_ERROR: 'SESSION_PERMISSION_ERROR',\n  LOGIN_FAILURE: 'SESSION_LOGIN_FAILURE',\n  TRACK: 'SESSION_TRACK',\n  TIMEOUT: 'SESSION_TIMEOUT',\n  ACCOUNT_CHANGE: 'SESSION_ACCOUNT_DETAILS_CHANGE',\n  ACCOUNT_CHANGE_PASSWORD: 'SESSION_ACCOUNT_PASSWORD_CHANGE',\n  ACCOUNT_CHANGE_PASSWORD_FAILURE: 'SESSION_ACCOUNT_PASSWORD_CHANGE_FAILURE',\n  ACCOUNT_SEARCH: 'ACCOUNT_SEARCH',\n  ACCOUNT_CREATE: 'ACCOUNT_CREATE',\n  ACCOUNT_READ: 'ACCOUNT_READ',\n  ACCOUNT_UPDATE: 'ACCOUNT_UPDATE',\n  ACCOUNT_DELETE: 'ACCOUNT_DELETE',\n  SUCCESS: '_SUCCESS',\n  FAILURE: '_FAILURE',\n};\n\nfor (const k in notifications)\n{\n  audit[k] = notifications[k];\n}\n\nmodule.exports = audit;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/helper/audit.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 221,
    "kind": "variable",
    "name": "notifications",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/audit.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/audit.js~notifications",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/audit.js",
    "importStyle": null,
    "description": "Audit event type constants.",
    "lineNumber": 33,
    "type": {
      "types": [
        "{\"OPERATION_SUCCESS\": string, \"OPERATION_FAILURE\": string, \"OPERATION_START\": string, \"EXCEPTION\": string, \"UNEXPECTED_ERROR\": string, \"INVALID_REQUEST\": string, \"LOGIN\": string, \"LOGOUT\": string, \"PERMISSION_ERROR\": string, \"LOGIN_FAILURE\": string, \"TRACK\": string, \"TIMEOUT\": string, \"ACCOUNT_CHANGE\": string, \"ACCOUNT_CHANGE_PASSWORD\": string, \"ACCOUNT_CHANGE_PASSWORD_FAILURE\": string, \"ACCOUNT_SEARCH\": string, \"ACCOUNT_CREATE\": string, \"ACCOUNT_READ\": string, \"ACCOUNT_UPDATE\": string, \"ACCOUNT_DELETE\": string, \"SUCCESS\": string, \"FAILURE\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 222,
    "kind": "function",
    "name": "audit",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/audit.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/audit.js~audit",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/audit.js",
    "importStyle": "audit",
    "description": "Fill in method for audit logging\n\nUse as req.audit(...) or res.audit(...)",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "source of event. e.g. user or ip"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "type of event. e.g. user or ip"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "data associated with event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 223,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/helper/bootstrap.js",
    "content": "const requestIp = require('request-ip');\nconst success = require('./success');\nconst error = require('./error');\nconst audit = require('./audit');\nconst resolve = require('./resolve');\nconst reject = require('./reject');\n\n/**\n * Out boilerplate to make things easier.\n * \n * @return {ExpressMiddleware} a middleware that will attach a bunch of convenience properties and functions to req and res.\n */\nfunction bootstrap(app, config)\n{\n  // helper function\n  config.audit = config.audit || app.audit || audit;\n  app.audit = config.audit;\n\n  return function (req, res, next)\n  {\n    req.clientIp = requestIp.getClientIp(req);\n    req.audit = res.audit = function ()\n    {\n      let source = `${req.user ? req.user.id : 'anonymous'}@${req.clientIp}`;\n\n      app.audit.apply(null, [source].concat(Array.prototype.slice.call(arguments)));\n    };\n    res.success = success.bind(null, res);\n    res.error = error.bind(null, res);\n    res.reject = reject.bind(null, res);\n    res.resolve = resolve.bind(null, res);\n    next();\n  }\n}\n\nmodule.exports = bootstrap;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/helper/bootstrap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 224,
    "kind": "variable",
    "name": "requestIp",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/bootstrap.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/bootstrap.js~requestIp",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/bootstrap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 225,
    "kind": "variable",
    "name": "success",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/bootstrap.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/bootstrap.js~success",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/bootstrap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 226,
    "kind": "variable",
    "name": "error",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/bootstrap.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/bootstrap.js~error",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/bootstrap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 227,
    "kind": "variable",
    "name": "audit",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/bootstrap.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/bootstrap.js~audit",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/bootstrap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 228,
    "kind": "variable",
    "name": "resolve",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/bootstrap.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/bootstrap.js~resolve",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/bootstrap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 229,
    "kind": "variable",
    "name": "reject",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/bootstrap.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/bootstrap.js~reject",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/bootstrap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 230,
    "kind": "function",
    "name": "bootstrap",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/bootstrap.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/bootstrap.js~bootstrap",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/bootstrap.js",
    "importStyle": "bootstrap",
    "description": "Out boilerplate to make things easier.",
    "lineNumber": 13,
    "return": {
      "nullable": null,
      "types": [
        "ExpressMiddleware"
      ],
      "spread": false,
      "description": "a middleware that will attach a bunch of convenience properties and functions to req and res."
    },
    "params": [
      {
        "name": "app",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 231,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/helper/callback.js",
    "content": "\"use strict\";\n\n/**\n * Calls a callback caller that calls a callback call for async instead of using promises.\n * \n * @param {Function} fn function to call\n * @param [args] arguments to call function with\n * @return {Promise} It returns a promise which resolves on callback call.\n */\nfunction callback(fn, ...args)\n{\n  return new Promise(function (resolve, reject)\n  {\n    function handler(err, result)\n    {\n      if (err)\n      {\n        reject(new Error(err));\n      }\n      else\n      {\n        resolve(result);\n      }\n    }\n    args.push(handler);\n    fn(...args);\n  });\n}\n\nmodule.exports = callback;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/helper/callback.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "function",
    "name": "callback",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/callback.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/callback.js~callback",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/callback.js",
    "importStyle": "callback",
    "description": "Calls a callback caller that calls a callback call for async instead of using promises.",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "function to call"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "args",
        "description": "arguments to call function with"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "It returns a promise which resolves on callback call."
    }
  },
  {
    "__docId__": 233,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/helper/defer.js",
    "content": "\"use strict\";\n\n/**\n * Call a function later.\n * @param {Function} fn function to call\n * @param args Can also specify 0 or more arguments to call function with.\n */\nfunction defer(fn, args)\n{\n  fn && process.nextTick(fn.bind(...arguments));\n}\n\nmodule.exports = defer;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/helper/defer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 234,
    "kind": "function",
    "name": "defer",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/defer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/defer.js~defer",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/defer.js",
    "importStyle": "defer",
    "description": "Call a function later.",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "function to call"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Can also specify 0 or more arguments to call function with."
      }
    ],
    "return": null
  },
  {
    "__docId__": 235,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/helper/error.js",
    "content": "\"use strict\";\n\n/**\n * Return error status and payload as response.\n * \n * @param {Response} res use as res.error(...)\n * @param {string|object} [message='Failure'] error message to return; if a strig is specified, it will be converted to an error object\n * @param {string} [audit=false] audit event type\n * @param {string} [extra=undefined] extra audit payload which may help debug event\n */\nfunction error(res, message = 'Failure', audit = false, extra = undefined)\n{\n  if (audit)\n  {\n    res.audit(audit, message, extra);\n  }\n  if (typeof message === 'string')\n  {\n    message = {\n      error: message\n    };\n  }\n  res.status(400)\n    .json(message);\n}\n\nmodule.exports = error;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/helper/error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 236,
    "kind": "function",
    "name": "error",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/error.js~error",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/error.js",
    "importStyle": "error",
    "description": "Return error status and payload as response.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "use as res.error(...)"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'Failure'",
        "defaultRaw": "'Failure'",
        "name": "message",
        "description": "error message to return; if a strig is specified, it will be converted to an error object"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "audit",
        "description": "audit event type"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "extra",
        "description": "extra audit payload which may help debug event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/helper/generateId.js",
    "content": "\"use strict\";\n\nconst crypto = require('crypto');\n\n/**\n * Helper method that generates a new user id.\n * \n * This method uses current timestamp and random number generator to come up\n * with unique ids.\n * \n * @return {string}\n */\nmodule.exports = function ()\n{\n  return `${crypto.randomBytes(4)\n    .toString('hex')}.${(Date.now() + Math.random())\n    .toString(26)}`;\n}\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/helper/generateId.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 238,
    "kind": "variable",
    "name": "crypto",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/generateId.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/generateId.js~crypto",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/generateId.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 239,
    "kind": "function",
    "name": "generateId",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/generateId.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/generateId.js~generateId",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/generateId.js",
    "importStyle": "generateId",
    "description": "Helper method that generates a new user id.\n\nThis method uses current timestamp and random number generator to come up\nwith unique ids.",
    "lineNumber": 13,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 240,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/helper/reject.js",
    "content": "\"use strict\";\n\n/**\n * Returns a function that calls res.error\n * \n * @param {Response} res use as res.reject(...)\n * @param {string} [audit=false] audit event type\n * @param {string} [extra=undefined] extra audit payload which may help debug event\n */\nfunction reject(res, audit = false, extra = undefined)\n{\n  return function (err)\n  {\n    // console.error(err);\n    res.error(err && err.message || err, audit, extra);\n  };\n}\n\nmodule.exports = reject;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/helper/reject.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 241,
    "kind": "function",
    "name": "reject",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/reject.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/reject.js~reject",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/reject.js",
    "importStyle": "reject",
    "description": "Returns a function that calls res.error",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "use as res.reject(...)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "audit",
        "description": "audit event type"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "extra",
        "description": "extra audit payload which may help debug event"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/helper/resolve.js",
    "content": "\"use strict\";\n\n/**\n * Monitors a Promise and returns success or error based on promise outcome.\n * \n * @param {Response} res use as res.resolve(...)\n * @param {Promise} promiseObj Promise objecy to monitor\n * @param {string|object} [message=undefined] success or error message to return; if this is not specified, result of promise is returned.\n * @param {string} [audit=false] audit event type. note that '_SUCCESS' or '_FAILURE' is attached to this type depenidng on outcome\n * @param {string} [extra=undefined] extra audit payload which may help debug event\n */\nfunction resolve(res, promiseObj, message = undefined, audit = false, extra = undefined)\n{\n  promiseObj.then((response) =>\n  {\n    res.success(message || response, audit && `${audit}_SUCCESS`, extra);\n  }, res.reject(audit && `${audit}_FAILURE`, extra));\n}\n\nmodule.exports = resolve;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/helper/resolve.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 243,
    "kind": "function",
    "name": "resolve",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/resolve.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/resolve.js~resolve",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/resolve.js",
    "importStyle": "resolve",
    "description": "Monitors a Promise and returns success or error based on promise outcome.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "use as res.resolve(...)"
      },
      {
        "nullable": null,
        "types": [
          "Promise"
        ],
        "spread": false,
        "optional": false,
        "name": "promiseObj",
        "description": "Promise objecy to monitor"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "message",
        "description": "success or error message to return; if this is not specified, result of promise is returned."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "audit",
        "description": "audit event type. note that '_SUCCESS' or '_FAILURE' is attached to this type depenidng on outcome"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "extra",
        "description": "extra audit payload which may help debug event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 244,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/helper/success.js",
    "content": "\"use strict\";\n\n/**\n * Return success status and payload as response.\n * \n * @param {Response} res use as res.success(...)\n * @param {string|object} [message='Success'] success message to return\n * @param {string} [audit=false] audit event type\n * @param {string} [extra=undefined] extra audit payload which may help debug event\n */\nfunction success(res, message = 'Success', audit = false, extra = undefined)\n{\n  if (audit)\n  {\n    res.audit(audit, message, extra);\n  }\n  if (typeof message === 'string')\n  {\n    message = {\n      success: message\n    };\n  }\n  res.status(200)\n    .json(message);\n}\n\nmodule.exports = success;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/helper/success.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 245,
    "kind": "function",
    "name": "success",
    "memberof": "node-user-accounts-boilerplate-nahid/helper/success.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/helper/success.js~success",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/helper/success.js",
    "importStyle": "success",
    "description": "Return success status and payload as response.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "use as res.success(...)"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'Success'",
        "defaultRaw": "'Success'",
        "name": "message",
        "description": "success message to return"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "audit",
        "description": "audit event type"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "extra",
        "description": "extra audit payload which may help debug event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/restriction/failure.js",
    "content": "\"use strict\";\n\n/**\n * Implementation of failure aware rate restriction.\n * \n * Will intercept monitor requests. After a certain number of failures, it will block for a duration.\n * \n * Requires ```block-failed``` package.\n * \n * @param {object} [settings] settings for rate restriction, or null to disable\n * @param {number} settings.blockAttemptMs duration to monitor failure for\n * @param {number} settings.blockAttemptCount number of failures allowed in this duration\n * @param {number} settings.blockDurationMs duration to block for\n * @return {ExpressMiddlewareFunction}\n */\nfunction failure(settings = null)\n{\n  if (settings)\n  {\n    let blocker = require('block-failed');\n\n    // decypher config and defaults\n    const blockAttemptMs = settings.blockAttemptMs || 60 * 1000;\n    const blockAttemptCount = settings.blockAttemptCount || 5;\n    const blockDurationMs = settings.blockDurationMs || 5 * 60 * 1000;\n\n    // construct block object\n    const block = blocker(blockDurationMs, blockAttemptMs, blockAttemptCount - 1);\n\n    return function (req, res, next)\n    {\n      let attempted = false;\n\n      block(req.clientIp, (on_failure) =>\n      {\n        attempted = true;\n        res.on('finish', function ()\n        {\n          if (res.statusCode !== 200)\n          {\n            on_failure();\n          }\n        });\n        next();\n      }, (blockedMs) =>\n      {\n        if (!attempted)\n        {\n          res.error(`Operation is disabled due to too many failed attempts. Please try again in ${Math.round(blockedMs / 1000)} seconds`);\n        }\n      });\n    };\n  }\n\n  return function (req, res, next)\n  {\n    next();\n  };\n\n}\n\nmodule.exports = failure;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/restriction/failure.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 247,
    "kind": "function",
    "name": "failure",
    "memberof": "node-user-accounts-boilerplate-nahid/restriction/failure.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/restriction/failure.js~failure",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/restriction/failure.js",
    "importStyle": "failure",
    "description": "Implementation of failure aware rate restriction.\n\nWill intercept monitor requests. After a certain number of failures, it will block for a duration.\n\nRequires ```block-failed``` package.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "settings",
        "description": "settings for rate restriction, or null to disable"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "settings.blockAttemptMs",
        "description": "duration to monitor failure for"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "settings.blockAttemptCount",
        "description": "number of failures allowed in this duration"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "settings.blockDurationMs",
        "description": "duration to block for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExpressMiddlewareFunction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 248,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/restriction/recaptcha.js",
    "content": "\"use strict\";\n\n/**\n * Implementation of reCAPTCHA rate restriction.\n * \n * Will validate recaptcha using req.body.recaptchaResponse value.\n * \n * Requires ```node-recaptcha2``` package.\n * \n * @param {object} [settings] settings for recaptcha, or null to disable\n * @param {string} settings.privateKey also known as secret key\n * @param {string} settings.publicKey also known as site key\n * @return {ExpressMiddlewareFunction}\n */\nfunction recaptcha(settings = null)\n{\n  if (settings)\n  {\n    // make sure we have all the settings we need\n    const privateKey = settings.privateKey || false;\n    const publicKey = settings.publicKey || false;\n\n    if (privateKey && publicKey)\n    {\n      let Recaptcha = require('node-recaptcha2')\n        .Recaptcha;\n\n\n      return function (req, res, next)\n      {\n        if (!req.body.recaptchaResponse || typeof req.body.recaptchaResponse !== 'string' || req.body.recaptchaResponse.length < 1)\n        {\n          return res.error('reCAPTCHA response not included');\n        }\n        (new Recaptcha(publicKey, privateKey, {\n          remoteip: req.clientIp,\n          response: req.body.recaptchaResponse\n        }))\n        .verify((success, errCode) =>\n        {\n          if (!success)\n          {\n            res.error('Failed verifying reCAPTCHA');\n          }\n          else\n          {\n            next();\n          }\n        });\n      };\n    }\n  }\n\n  return function (req, res, next)\n  {\n    next();\n  };\n}\n\nmodule.exports = recaptcha;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/restriction/recaptcha.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 249,
    "kind": "function",
    "name": "recaptcha",
    "memberof": "node-user-accounts-boilerplate-nahid/restriction/recaptcha.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/restriction/recaptcha.js~recaptcha",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/restriction/recaptcha.js",
    "importStyle": "recaptcha",
    "description": "Implementation of reCAPTCHA rate restriction.\n\nWill validate recaptcha using req.body.recaptchaResponse value.\n\nRequires ```node-recaptcha2``` package.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "settings",
        "description": "settings for recaptcha, or null to disable"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "settings.privateKey",
        "description": "also known as secret key"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "settings.publicKey",
        "description": "also known as site key"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExpressMiddlewareFunction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 250,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js",
    "content": "\"use strict\";\n\nconst Store = require('express-session/session/store');\nconst defer = require('../helper/defer');\n\n/**\n * Drop in replacement for express session store that saves session data in\n * a collection.\n */\nclass CollectionSessionStore extends Store\n{\n\n  /**\n   * @param {CachedCollection} collection collection wrapped\n   * @param {object} options see fields\n   */\n  constructor(collection, options = {})\n  {\n    super();\n\n    /**\n     * collection wrapped\n     */\n    this.collection = collection;\n\n    /**\n     * Session dueation\n     */\n    this.sessionsTTL = options.sessionsTTL || 8 * 60 * 60 * 1000;\n  }\n\n  /**\n   * clean up expired sessions\n   * @protected\n   */\n  cleanup()\n  {\n    const collection = this.collection;\n    const sessions = collection.lookup;\n\n    for (let sessionId in sessions)\n    {\n      let session = sessions[sessionId];\n\n      if (session)\n      {\n        if (session.expires < Date.now())\n        {\n          collection.deleteRecord(session);\n        }\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  get(sessionId, callback)\n  {\n    this.cleanup();\n    defer(callback, null, this.collection.lookup[sessionId]);\n  }\n\n  /**\n   * @override\n   */\n  set(sessionId, session, callback)\n  {\n    this.cleanup();\n    session = JSON.parse(JSON.stringify(session));\n    session.id = sessionId;\n\n    // let's not send an update to database every time the user makes a request\n    const THRESHOLD = this.sessionsTTL / 10;\n\n    session.expires = Math.ceil((Date.now() + this.sessionsTTL) / THRESHOLD) * THRESHOLD;\n\n    if (this.collection.lookup[sessionId] && JSON.stringify(this.collection.lookup[sessionId]) !== JSON.stringify(session))\n    {\n      this.collection.updateRecord(session);\n    }\n    else if (!this.collection.lookup[sessionId])\n    {\n      this.collection.createRecord(session);\n    }\n    defer(callback);\n  }\n\n  /**\n   * @override\n   */\n  destroy(sessionId, callback)\n  {\n    let session = this.collection.lookup[sessionId];\n\n    if (session)\n    {\n      this.collection.deleteRecord(session);\n    }\n    defer(callback);\n  }\n}\n\nmodule.exports = CollectionSessionStore;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 251,
    "kind": "variable",
    "name": "Store",
    "memberof": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js~Store",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 252,
    "kind": "variable",
    "name": "defer",
    "memberof": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js~defer",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 253,
    "kind": "class",
    "name": "CollectionSessionStore",
    "memberof": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js~CollectionSessionStore",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js",
    "importStyle": "CollectionSessionStore",
    "description": "Drop in replacement for express session store that saves session data in\na collection.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "Store"
    ]
  },
  {
    "__docId__": 254,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js~CollectionSessionStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js~CollectionSessionStore#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "CachedCollection"
        ],
        "spread": false,
        "optional": false,
        "name": "collection",
        "description": "collection wrapped"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "see fields"
      }
    ]
  },
  {
    "__docId__": 255,
    "kind": "member",
    "name": "collection",
    "memberof": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js~CollectionSessionStore",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js~CollectionSessionStore#collection",
    "access": "public",
    "description": "collection wrapped",
    "lineNumber": 24,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "member",
    "name": "sessionsTTL",
    "memberof": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js~CollectionSessionStore",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js~CollectionSessionStore#sessionsTTL",
    "access": "public",
    "description": "Session dueation",
    "lineNumber": 29,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "cleanup",
    "memberof": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js~CollectionSessionStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js~CollectionSessionStore#cleanup",
    "access": "protected",
    "description": "clean up expired sessions",
    "lineNumber": 36,
    "params": [],
    "return": null
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "get",
    "memberof": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js~CollectionSessionStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js~CollectionSessionStore#get",
    "access": "public",
    "description": "",
    "lineNumber": 58,
    "override": true,
    "params": [
      {
        "name": "sessionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "set",
    "memberof": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js~CollectionSessionStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js~CollectionSessionStore#set",
    "access": "public",
    "description": "",
    "lineNumber": 67,
    "override": true,
    "params": [
      {
        "name": "sessionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "session",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "destroy",
    "memberof": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js~CollectionSessionStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/session/CollectionSessionStore.js~CollectionSessionStore#destroy",
    "access": "public",
    "description": "",
    "lineNumber": 92,
    "override": true,
    "params": [
      {
        "name": "sessionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 261,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js",
    "content": "\"use strict\";\n\nconst Store = require('express-session/session/store');\nconst defer = require('../helper/defer');\n\n/**\n * In memory session store.\n * \n * Apparently the default session store is not menat to be used for prouction\n * or something.\n * \n * Will not scale horizontally.\n */\nclass MemorySessionStore extends Store\n{\n\n  /**\n   * @param {object} options see fields\n   */\n  constructor(options = {})\n  {\n    super();\n\n    /**\n     * In memory sessions list.\n     */\n    this.sessions = {};\n\n    /**\n     * Session dueation\n     */\n    this.sessionsTTL = options.sessionsTTL || 8 * 60 * 60 * 1000;\n  }\n\n  /**\n   * clean up expired sessions\n   * @protected\n   */\n  cleanup()\n  {\n    for (let sessionId in this.sessions)\n    {\n      let session = this.sessions[sessionId];\n\n      if (session)\n      {\n        if (session.expires < Date.now())\n        {\n          delete this.sessions[sessionId];\n        }\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  get(sessionId, callback)\n  {\n    this.cleanup();\n    defer(callback, null, this.sessions[sessionId]);\n  }\n\n  /**\n   * @override\n   */\n  set(sessionId, session, callback)\n  {\n    this.cleanup();\n    this.sessions[sessionId] = session;\n    session.expires = Date.now() + this.sessionsTTL;\n    defer(callback);\n  }\n\n  /**\n   * @override\n   */\n  destroy(sessionId, callback)\n  {\n    delete this.sessions[sessionId];\n    defer(callback);\n  }\n}\n\nmodule.exports = MemorySessionStore;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 262,
    "kind": "variable",
    "name": "Store",
    "memberof": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js~Store",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 263,
    "kind": "variable",
    "name": "defer",
    "memberof": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js~defer",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 264,
    "kind": "class",
    "name": "MemorySessionStore",
    "memberof": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js~MemorySessionStore",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js",
    "importStyle": "MemorySessionStore",
    "description": "In memory session store.\n\nApparently the default session store is not menat to be used for prouction\nor something.\n\nWill not scale horizontally.",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "Store"
    ]
  },
  {
    "__docId__": 265,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js~MemorySessionStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js~MemorySessionStore#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "see fields"
      }
    ]
  },
  {
    "__docId__": 266,
    "kind": "member",
    "name": "sessions",
    "memberof": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js~MemorySessionStore",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js~MemorySessionStore#sessions",
    "access": "public",
    "description": "In memory sessions list.",
    "lineNumber": 27,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "member",
    "name": "sessionsTTL",
    "memberof": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js~MemorySessionStore",
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js~MemorySessionStore#sessionsTTL",
    "access": "public",
    "description": "Session dueation",
    "lineNumber": 32,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "cleanup",
    "memberof": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js~MemorySessionStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js~MemorySessionStore#cleanup",
    "access": "protected",
    "description": "clean up expired sessions",
    "lineNumber": 39,
    "params": [],
    "return": null
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "get",
    "memberof": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js~MemorySessionStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js~MemorySessionStore#get",
    "access": "public",
    "description": "",
    "lineNumber": 58,
    "override": true,
    "params": [
      {
        "name": "sessionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "set",
    "memberof": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js~MemorySessionStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js~MemorySessionStore#set",
    "access": "public",
    "description": "",
    "lineNumber": 67,
    "override": true,
    "params": [
      {
        "name": "sessionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "session",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "destroy",
    "memberof": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js~MemorySessionStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "node-user-accounts-boilerplate-nahid/session/MemorySessionStore.js~MemorySessionStore#destroy",
    "access": "public",
    "description": "",
    "lineNumber": 78,
    "override": true,
    "params": [
      {
        "name": "sessionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 272,
    "kind": "file",
    "name": "node-user-accounts-boilerplate-nahid/setup.js",
    "content": "\"use strict\";\n\nconst audit = require('./helper/audit');\nconst access = require('./helper/access');\nconst bootstrap = require('./helper/bootstrap');\nconst cookieParser = require('cookie-parser');\nconst expressSession = require('express-session');\nconst json = require('body-parser')\n  .json();\nconst parseFilters = require('./filters/parse');\nconst passport = require('passport');\n\nconst CollectionSessionStore = require('./session/CollectionSessionStore');\nconst MemorySessionStore = require('./session/MemorySessionStore');\n\nconst passwordField = require('./fields/password');\nconst defaultFields = require('./fields/defaultFields');\n\n/**\n * Library entry point\n *\n * @param {Express} app result of express()\n * @param {Config} config configuration\n */\nfunction setup(app, config)\n{\n  // PASSPORT BOILERPLATE\n  app.use(bootstrap(app, config));\n  app.use(cookieParser());\n  app.use(expressSession({\n    secret: Math.round(Date.now() / 1000 / 3600 / 24)\n      .toString(16),\n    resave: true,\n    saveUninitialized: false,\n    store: config.sessions ? new CollectionSessionStore(config.sessions, config) : new MemorySessionStore(config),\n  }));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  config.users = config.users || config.collection;\n\n  // User serialisation\n  passport.serializeUser(function (user, done)\n  {\n    done(null, user.id || 'none');\n  });\n  passport.deserializeUser(function (user, done)\n  {\n    done(null, config.users.lookup[user] || {});\n  });\n\n  // API endpoint\n  config.prefix = config.prefix || '/api/accounts';\n  config.fields = config.fields || {};\n  for (let field in defaultFields)\n  {\n    if (!config.fields[field])\n    {\n      config.fields[field] = defaultFields[field];\n    }\n  }\n\n  // setup APIs\n  setupAuthAPI(app, config);\n  setupAccountsAPI(app, config);\n}\n\nfunction setupAuthAPI(app, config)\n{\n  const prefix = config.prefix;\n\n  // login/registration\n  const methods = [];\n\n  for (let auth of config.auth || [])\n  {\n    methods.push(auth.description);\n    auth.install(app, `${prefix}/${auth.method}`, passport);\n    if (auth.description.usesPassword && !config.fields.password)\n    {\n      config.fields.password = passwordField;\n    }\n  }\n  app.get(`${prefix}/methods.json`, (req, res) =>\n  {\n    res.json(methods);\n  });\n\n  const fields = summariseFields(config.fields);\n  app.get(`${prefix}/fields.json`, (req, res) =>\n  {\n    res.json(fields);\n  });\n\n  // self read\n  app.get(`${prefix}/current.json`, (req, res) =>\n  {\n    if (req.user && req.user.id)\n    {\n      res.json(summariseUserRecord(req.user, config.fields));\n    }\n    else\n    {\n      res.json(false);\n    }\n  });\n\n  // self update\n  app.put(`${prefix}/current.json`, access.LOGGEDIN, json, async (req, res) =>\n  {\n    let user = req.user;\n    if (req.body)\n    {\n      try\n      {\n        await updateUserRecord(user, req.body || {}, user, config);\n        res.resolve(config.users.updateRecord(user), 'Done', audit.ACCOUNT_CHANGE);\n      }\n      catch (e)\n      {\n        res.error(e.message, `${audit.ACCOUNT_CHANGE}_FAILURE`)\n      }\n    }\n  });\n\n  // logout\n  app.all(`${prefix}/logout.json`, (req, res) =>\n  {\n    res.success('Logged out', audit.LOGOUT);\n    req.logout();\n    req.session.destroy();\n  });\n}\n\nfunction setupAccountsAPI(app, config)\n{\n  // ACCOUNT MANAGEMENT API\n  const prefix = config.prefix;\n  const collection = config.users;\n\n  // discover\n  const USER_DATA_ACCESS = access.ROLE_ONE_OF(config.administratorRoles || {});\n\n  app.all(`${prefix}/search.json`, USER_DATA_ACCESS, (req, res) =>\n  {\n    let query = parseFilters(collection.searchMeta, req.query);\n    res.resolve(collection.searchRecords(query), false, audit.ACCOUNT_SEARCH, JSON.stringify(query));\n  });\n\n  app.post(`${prefix}/:user.json`, USER_DATA_ACCESS, json, async (req, res) =>\n  {\n    try\n    {\n      let auth = config.auth.filter(auth => auth.method === req.body.type)[0];\n      let user = auth.findUser(req.body.value);\n      if (user)\n      {\n        throw new Error('user already exists');\n      }\n      let profile = await auth.createProfileFromCredential(req.body.value, req.body);\n      user = auth.createUserFromProfile(profile);\n      user = await config.users.createRecord(user);\n      res.success({success: 'Created!', user}, audit.ACCOUNT_CREATE + audit.SUCCESS);\n    }\n    catch (e)\n    {\n      res.audit(audit.ACCOUNT_CREATE + audit.FAILURE, e.message, JSON.stringify(req.body));\n      res.error('Account creation failed')\n    }\n  });\n\n  // read\n  app.get(`${prefix}/:user.json`, USER_DATA_ACCESS, (req, res) =>\n  {\n    let query = {};\n    query[collection.primaryKey] = req.params.user;\n\n    collection.readRecord(query)\n      .then((user) =>\n      {\n        res.json(summariseUserRecord(user, config.fields, {credentials: true}));\n        res.audit(audit.ACCOUNT_READ + audit.SUCCESS, JSON.stringify(query));\n      }, res.reject(audit.ACCOUNT_READ + audit.FAILURE), JSON.stringify(query));\n  });\n\n  // update\n  app.put(`${prefix}/:user.json`, USER_DATA_ACCESS, json, (req, res) =>\n  {\n    let query = {};\n\n    query[collection.primaryKey] = req.params.user;\n    collection.readRecord(query)\n      .then(async (record) =>\n      {\n        let params = Object.keys(req.body);\n\n        params = JSON.stringify(Object.assign({\n          params\n        }, query));\n        try\n        {\n          await updateUserRecord(record, req.body, req.user, config);\n          res.resolve(collection.updateRecord(record), 'Done', audit.ACCOUNT_UPDATE, params);\n        }\n        catch (e)\n        {\n          res.error(e.message, audit.ACCOUNT_UPDATE + audit.FAILURE, params);\n        }\n      }, res.reject(audit.ACCOUNT_UPDATE + audit.FAILURE, JSON.stringify(query)));\n  });\n\n  // delete\n  app.delete(`${prefix}/:user.json`, USER_DATA_ACCESS, (req, res) =>\n  {\n    let query = {};\n\n    query[collection.primaryKey] = req.params.user;\n    if (req.params.user !== req.user.id)\n    {\n      res.resolve(collection.deleteRecord(query), 'User deleted', audit.ACCOUNT_DELETE, JSON.stringify(req.params));\n    }\n    else\n    {\n      res.error(\"Can't delete yourself\", audit.ACCOUNT_DELETE + audit.FAILURE);\n    }\n  });\n\n}\n\nfunction summariseUserRecord(user, fields, addiionalToInclude={})\n{\n  const output = {};\n  for (let field in user)\n  {\n    const meta = fields[field];\n    if (meta)\n    {\n      if (meta.mask)\n      {\n        output[field] = true;\n      }\n      else\n      {\n        output[field] = user[field];\n      }\n    }\n    else if (addiionalToInclude[field])\n    {\n      output[field] = user[field];\n    }\n  }\n  output.roles = user.roles;\n  return output;\n}\n\nasync function updateUserRecord(user, update, loginUser, config)\n{\n  for (let field in update)\n  {\n    const meta = config.fields[field];\n    if (meta)\n    {\n      const value = update[field];\n\n      if (meta.self === false && loginUser.id === user.id)\n      {\n        throw new Error(`Can't update your own ${field}`);\n      }\n\n      await meta.assign(user, field, value, meta, loginUser, config);\n      continue;\n    }\n    else\n    {\n      throw new Error(`${field} not editable`);\n    }\n  }\n}\n\nfunction summariseFields(inputFields)\n{\n  let fields = Object.keys(inputFields).map(field =>\n  {\n    return {\n      name: field,\n      order: inputFields[field].order || 10,\n      type: inputFields[field].type || 'string',\n      self: inputFields[field].self !== undefined? inputFields[field].self : true,\n      admin: inputFields[field].admin !== undefined? inputFields[field].admin : true,\n      enabled: inputFields[field].enabled !== undefined? inputFields[field].enabled : true,\n    };\n  });\n  fields.sort(function(a, b)\n  {\n    if (a.order !== b.order)\n    {\n      return a.order - b.order;\n    }\n    else\n    {\n      if (a.name < b.name)\n      {\n        return -1\n      }\n      else\n      {\n        return 1;\n      }\n    }\n  });\n  return fields;\n}\n\nmodule.exports = setup;\n",
    "static": true,
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/setup.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 273,
    "kind": "variable",
    "name": "audit",
    "memberof": "node-user-accounts-boilerplate-nahid/setup.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/setup.js~audit",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 274,
    "kind": "variable",
    "name": "access",
    "memberof": "node-user-accounts-boilerplate-nahid/setup.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/setup.js~access",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 275,
    "kind": "variable",
    "name": "bootstrap",
    "memberof": "node-user-accounts-boilerplate-nahid/setup.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/setup.js~bootstrap",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 276,
    "kind": "variable",
    "name": "cookieParser",
    "memberof": "node-user-accounts-boilerplate-nahid/setup.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/setup.js~cookieParser",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 277,
    "kind": "variable",
    "name": "expressSession",
    "memberof": "node-user-accounts-boilerplate-nahid/setup.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/setup.js~expressSession",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 278,
    "kind": "variable",
    "name": "json",
    "memberof": "node-user-accounts-boilerplate-nahid/setup.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/setup.js~json",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 279,
    "kind": "variable",
    "name": "parseFilters",
    "memberof": "node-user-accounts-boilerplate-nahid/setup.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/setup.js~parseFilters",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 280,
    "kind": "variable",
    "name": "passport",
    "memberof": "node-user-accounts-boilerplate-nahid/setup.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/setup.js~passport",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 281,
    "kind": "variable",
    "name": "CollectionSessionStore",
    "memberof": "node-user-accounts-boilerplate-nahid/setup.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/setup.js~CollectionSessionStore",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 282,
    "kind": "variable",
    "name": "MemorySessionStore",
    "memberof": "node-user-accounts-boilerplate-nahid/setup.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/setup.js~MemorySessionStore",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 283,
    "kind": "variable",
    "name": "passwordField",
    "memberof": "node-user-accounts-boilerplate-nahid/setup.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/setup.js~passwordField",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 284,
    "kind": "variable",
    "name": "defaultFields",
    "memberof": "node-user-accounts-boilerplate-nahid/setup.js",
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/setup.js~defaultFields",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 285,
    "kind": "function",
    "name": "setupAuthAPI",
    "memberof": "node-user-accounts-boilerplate-nahid/setup.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/setup.js~setupAuthAPI",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "app",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 286,
    "kind": "function",
    "name": "setupAccountsAPI",
    "memberof": "node-user-accounts-boilerplate-nahid/setup.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/setup.js~setupAccountsAPI",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "params": [
      {
        "name": "app",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 287,
    "kind": "function",
    "name": "summariseUserRecord",
    "memberof": "node-user-accounts-boilerplate-nahid/setup.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/setup.js~summariseUserRecord",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "params": [
      {
        "name": "user",
        "types": [
          "*"
        ]
      },
      {
        "name": "fields",
        "types": [
          "*"
        ]
      },
      {
        "name": "addiionalToInclude",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 288,
    "kind": "function",
    "name": "updateUserRecord",
    "memberof": "node-user-accounts-boilerplate-nahid/setup.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/setup.js~updateUserRecord",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 256,
    "undocument": true,
    "params": [
      {
        "name": "user",
        "types": [
          "*"
        ]
      },
      {
        "name": "update",
        "types": [
          "*"
        ]
      },
      {
        "name": "loginUser",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 289,
    "kind": "function",
    "name": "summariseFields",
    "memberof": "node-user-accounts-boilerplate-nahid/setup.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/setup.js~summariseFields",
    "access": "public",
    "export": false,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 280,
    "undocument": true,
    "params": [
      {
        "name": "inputFields",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 290,
    "kind": "function",
    "name": "setup",
    "memberof": "node-user-accounts-boilerplate-nahid/setup.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "node-user-accounts-boilerplate-nahid/setup.js~setup",
    "access": "public",
    "export": true,
    "importPath": "node-user-accounts-boilerplate/node-user-accounts-boilerplate-nahid/setup.js",
    "importStyle": "setup",
    "description": "Library entry point",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Express"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "result of express()"
      },
      {
        "nullable": null,
        "types": [
          "Config"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "configuration"
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# User Accounts Boilerplate\n\n[![SCM](https://nahidakbar.github.io/node-user-accounts-boilerplate-nahid/coverage/public.svg)](https://github.com/nahidakbar/node-user-accounts-boilerplate-nahid)\n[![Build Status](https://travis-ci.org/nahidakbar/node-user-accounts-boilerplate-nahid.svg?branch=master)](https://travis-ci.org/nahidakbar/node-user-accounts-boilerplate-nahid)\n[![Documentation](https://nahidakbar.github.io/node-user-accounts-boilerplate-nahid/badge.svg)](https://nahidakbar.github.io/node-user-accounts-boilerplate-nahid/)\n[![Coverage](https://nahidakbar.github.io/node-user-accounts-boilerplate-nahid/coverage/lines.svg)](https://nahidakbar.github.io/node-user-accounts-boilerplate-nahid/coverage/)\n[![Coverage](https://nahidakbar.github.io/node-user-accounts-boilerplate-nahid/coverage/functions.svg)](https://nahidakbar.github.io/node-user-accounts-boilerplate-nahid/coverage/)\n[![Coverage](https://nahidakbar.github.io/node-user-accounts-boilerplate-nahid/coverage/branches.svg)](https://nahidakbar.github.io/node-user-accounts-boilerplate-nahid/coverage/)\n[![Coverage](https://nahidakbar.github.io/node-user-accounts-boilerplate-nahid/coverage/statements.svg)](https://nahidakbar.github.io/node-user-accounts-boilerplate-nahid/coverage/)\n\nShared codebase for implementing authentication across my node.js projects.\n\nConcept looked something like this:\n\n![Concept](doc/concept.png)\n\nTODO: update diagram.\n",
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"node-user-accounts-boilerplate\",\n  \"version\": \"0.2.3\",\n  \"description\": \"Off the shelf user accounts management\",\n  \"main\": \"setup.js\",\n  \"directories\": {\n    \"doc\": \"doc\",\n    \"test\": \"test\"\n  },\n  \"scripts\": {\n    \"test\": \"jbn test\",\n    \"lint\": \"jbn lint\",\n    \"init\": \"jbn init\",\n    \"docs\": \"jbn docs\",\n    \"form\": \"jbn form\"\n  },\n  \"author\": \"Nahid Akbar\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"body-parser\": \"^1.17.2\",\n    \"cookie-parser\": \"^1.4.3\",\n    \"express-session\": \"^1.15.3\",\n    \"passport\": \"^0.3.2\",\n    \"request-ip\": \"^2.0.2\"\n  },\n  \"devDependencies\": {\n    \"aws-sdk\": \"^2.112.0\",\n    \"block-failed\": \"0.0.1\",\n    \"express\": \"^4.15.4\",\n    \"jbn\": \"latest\",\n    \"node-collections-boilerplate\": \"^0.1.8\",\n    \"node-recaptcha2\": \"^2.1.2\",\n    \"passport-local\": \"^1.0.0\",\n    \"scrypt\": \"^6.0.3\",\n    \"sendmail\": \"^1.2.0\"\n  }\n}\n",
    "longname": "/home/travis/build/nahidakbar/node-user-accounts-boilerplate-nahid/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]